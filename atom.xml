<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[脑波网]]></title>
  <link href="http://dexterdeng.github.com/atom.xml" rel="self"/>
  <link href="http://dexterdeng.github.com/"/>
  <updated>2014-05-12T13:37:06+08:00</updated>
  <id>http://dexterdeng.github.com/</id>
  <author>
    <name><![CDATA[Dexter Deng]]></name>
    <email><![CDATA[dexterdeng@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting up a new rbenv environment on centos]]></title>
    <link href="http://dexterdeng.github.com/blog/2014/05/11/setting-up-a-new-rbenv-environment-on-centos/"/>
    <updated>2014-05-11T12:22:00+08:00</updated>
    <id>http://dexterdeng.github.com/blog/2014/05/11/setting-up-a-new-rbenv-environment-on-centos</id>
    <content type="html"><![CDATA[<p>从零开始新部署一台服务器，把过程记下来，以后能快点。</p>

<p>首先， 使用<code>uname -a</code>确定系统是 x86_64 还是 i386.</p>

<ol>
<li>安装Percona数据库。</li>
</ol>


<p> 1.1 删除自带mysql</p>

<pre><code>rpm -qa | grep mysql #列出自带mysql包。
</code></pre>

<p>得到以下结果:</p>

<pre><code>mysql-connector-odbc-3.51.26r1127-1.el5
mysql-5.0.77-4.el5_6.6
libdbi-dbd-mysql-0.8.1a-1.2.2
mysql-server-5.0.77-4.el5_6.6
</code></pre>

<p>使用 <code>yum remove xxxx</code> 逐一删除干净。</p>

<p>1.2 添加新 pecona 到yum的源中。</p>

<pre><code>rpm -Uhv http://www.percona.com/redir/downloads/percona-release/percona-release-0.0-1.i386.rpm
</code></pre>

<p>或者</p>

<pre><code>rpm -Uhv http://www.percona.com/redir/downloads/percona-release/percona-release-0.0-1.x86_64.rpm
</code></pre>

<p>或者，先<code>wget xxx</code>, 再 <code>rpm</code> 安装。</p>

<pre><code>yum list |grep percona  #有结果表示成功
percona-release.i386 0.0-1 installed
Percona-SQL-50-debuginfo.i686 5.0.92-b23.88.rhel6 percona
Percona-SQL-client-50.i686 5.0.92-b23.88.rhel6 percona
....
</code></pre>

<p>1.3 傻瓜式一部安装一些依赖包</p>

<pre><code>yum install -y gcc gcc-c++ autoconf automake zlib* fiex* libxml* ncurses-devel libmcrypt* libtool-ltdl-devel* cmake bison 
</code></pre>

<p>1.4 安装 Percona</p>

<pre><code>yum install Percona-Server-shared-compat Percona-Server-client-55 Percona-Server-server-55 Percona-Server-shared-55 Percona-Server-test-55  percona-xtrabackup-20
</code></pre>

<p>安装&#8230;</p>

<pre><code>Dependencies Resolved

=====================================================================================================================================================================================
 Package                                                Arch                           Version                                               Repository                         Size
=====================================================================================================================================================================================
Installing:
 Percona-Server-client-55                               i386                           5.5.37-rel35.0.el5                                    percona                           8.0 M
 Percona-Server-server-55                               i386                           5.5.37-rel35.0.el5                                    percona                            19 M
 Percona-Server-shared-55                               i386                           5.5.37-rel35.0.el5                                    percona                           820 k
 Percona-Server-shared-compat                           i386                           5.1.68-rel14.6.551.rhel5                              percona                           5.0 M
 Percona-Server-test-55                                 i386                           5.5.37-rel35.0.el5                                    percona                           9.4 M
 percona-xtrabackup-20                                  i386                           2.0.8-587.rhel5      
</code></pre>

<p>1.5  启动mysql</p>

<pre><code>/etc/init.d/mysql start
</code></pre>

<p>安全配置</p>

<pre><code>/usr/bin/mysql_secure_installation
</code></pre>

<ol>
<li>安装 Mongodb</li>
</ol>


<p>2.1 配置包管理系统</p>

<p>创建 <code>/etc/yum.repos.d/mongodb.repo</code> 用来保存mongodb 配置。</p>

<p>64-bit system:</p>

<pre><code>[mongodb]
name=MongoDB Repository
baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/
gpgcheck=0
enabled=1
</code></pre>

<p>32-bit system:</p>

<pre><code>[mongodb]
name=MongoDB Repository
baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/i686/
gpgcheck=0
enabled=1
</code></pre>

<p>2.1 安装mongodb 包和相关软件</p>

<p>安装最新mongoDB.</p>

<pre><code>sudo yum install mongodb-org
</code></pre>

<p>如果安装指定版本如2.6.1</p>

<pre><code>sudo yum install mongodb-org-2.6.1 mongodb-org-server-2.6.1 mongodb-org-shell-2.6.1 mongodb-org-mongos-2.6.1 mongodb-org-tools-2.6.1
</code></pre>

<p>2.2 启动 mongoDB</p>

<p>MongoDB的数据存 <code>/var/lib/mongo</code>, 日志存 <code>/var/log/mongo</code>, 使用mongod 账号启动， 如果你想更改启动账号，你也需要同时更改这两个目录的访问控制。</p>

<p>启动：</p>

<pre><code>sudo service mongod start
</code></pre>

<p>配置开机启动：</p>

<pre><code>sudo chkconfig mongod on
</code></pre>

<p>关闭：</p>

<pre><code>sudo service mongod stop
</code></pre>

<p>重启</p>

<pre><code>sudo service mongod restart
</code></pre>

<ol>
<li><p>创建app账号</p>

<p> useradd app</p></li>
<li><p>安装 基础包</p>

<p> rpm -Uvh http://dl.fedoraproject.org/pub/epel/5/i386/epel-release-5-4.noarch.rpm
 yum install -y gcc-c++ patch readline readline-devel zlib zlib-devel libyaml-devel libffi-devel openssl-devel   make bzip2 autoconf automake libtool bison iconv-devel git-core</p></li>
</ol>


<h1>安装rbenv</h1>

<pre><code>git clone git://github.com/sstephenson/rbenv.git ~/.rbenv
# 用来编译安装 ruby
git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
# 用来管理 gemset, 可选, 因为有 bundler 也没什么必要
git clone git://github.com/jamis/rbenv-gemset.git  ~/.rbenv/plugins/rbenv-gemset
# 通过 gem 命令安装完 gem 后无需手动输入 rbenv rehash 命令, 推荐
git clone git://github.com/sstephenson/rbenv-gem-rehash.git ~/.rbenv/plugins/rbenv-gem-rehash
# 通过 rbenv update 命令来更新 rbenv 以及所有插件, 推荐
git clone https://github.com/rkh/rbenv-update.git ~/.rbenv/plugins/rbenv-update

git clone git://github.com/dcarley/rbenv-sudo.git ~/.rbenv/plugins/rbenv-sudo
</code></pre>

<p>然后把下面的代码放到 <code>~/.bash_profile</code> 里</p>

<pre><code>export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"
</code></pre>

<p><strong>注意</strong> Unubtu请放到 <code>~/.bashrc</code> 里, zsh用户是 <code>~/.zshrc</code></p>

<p>然后重开一个终端就可以执行 rbenv 了.</p>

<h1>使用</h1>

<h2>安装 ruby</h2>

<pre><code>rbenv install --list  # 列出所有 ruby 版本
rbenv install 1.9.3-p392     # 安装 1.9.3-p392
rbenv install jruby-1.7.3    # 安装 jruby-1.7.3
</code></pre>

<h2>列出版本</h2>

<pre><code>rbenv versions               # 列出安装的版本
rbenv version                # 列出正在使用的版本
</code></pre>

<h2>设置版本</h2>

<pre><code>rbenv global 1.9.3-p392      # 默认使用 1.9.3-p392
rbenv shell 1.9.3-p392       # 当前的 shell 使用 1.9.3-p392, 会设置一个 `RBENV_VERSION` 环境变量
rbenv local jruby-1.7.3      # 当前目录使用 jruby-1.7.3, 会生成一个 `.rbenv-version` 文件
</code></pre>

<h2>其他</h2>

<pre><code>rbenv rehash                 # 每当切换 ruby 版本和执行 bundle install 之后必须执行这个命令
rbenv which irb              # 列出 irb 这个命令的完整路径
rbenv whence irb             # 列出包含 irb 这个命令的版本
</code></pre>

<p>安装最新版ruby.</p>

<pre><code>rbenv install 2.1.2
</code></pre>

<ol>
<li><p>安装passenger</p>

<p> rbenv global 2.1.2</p>

<p> gem install bundler</p>

<p> gem install passenger #-v=4.0.17</p>

<p> rbenv rehash</p>

<p> # Download nginx-1.6.0, download pcre-8.33
 /home/app/nginx-1.6.0
 /home/app/pcre-8.33</p>

<p> rbenv sudo passenger-install-nginx-module
 ->
 选Advanced
 选 /home/app/nginx-1.6.0o
 目标: /opt/nginx
 配置项增加：  &#8211;with-http_realip_module   &#8211;with-pcre=/home/app/pcre-8.33</p>

<p> 安装&#8230;</p>

<p> 复制/etc/init.d/nginx文件， 注意sbin和conf的配置目录。</p></li>
</ol>


<p>接下来的部分很简单, 不再赘述。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[服务器宕机时间]]></title>
    <link href="http://dexterdeng.github.com/blog/2013/03/20/fu-wu-qi-dang-ji-shi-jian/"/>
    <updated>2013-03-20T01:33:00+08:00</updated>
    <id>http://dexterdeng.github.com/blog/2013/03/20/fu-wu-qi-dang-ji-shi-jian</id>
    <content type="html"><![CDATA[<p>今天服务器意外宕机， 原因尚未查明，  查明后补上。</p>

<p>时间是中午1点， 服务器忽然变得超慢, 迅速没响应。 这时候我很愚蠢，
本来有一点时间输入一条命令的，结果我输了个git pull.
如果当时用top查看谁在坏事，或许结果会不一样。</p>

<p>2点， 服务器可以ping通， 但是，只hudson 启动。
并机房的人说，机器出现io错误。  根源应该是这个。</p>

<pre><code>scsi 0:0:1:0: Attached scsi generic sg1 type 0
sd 0:1:0:0: Attached scsi generic sg2 type 0
floppy0: no floppy controllers found
work still pending
lp: driver loaded but no devices found
ACPI: Power Button (FF) [PWRF]
ACPI: Mapper loaded
dell-wmi: No known WMI GUID found
ACPI Exception (evregion-0424): AE_SUPPORT, Returned by Handler for [DataTable] [20060707]
ACPI Error (psparse-0537): Method parse/execution failed [\_SB_.PMI0._GHL] (Node ffff81033005b8b0), AE_SUPPORT
ACPI Error (psparse-0537): Method parse/execution failed [\_SB_.PMI0._PMC] (Node ffff81033005b8f0), AE_SUPPORT
ACPI Exception (power_meter-0759): AE_SUPPORT, Evaluating _PMC [20060707]
</code></pre>

<p>几经周折，工作人员执意reloadserver, 3小时后， 旧hdd用usb线插入机器。
(这里要检查是不是usb2.0. 否则拷贝很慢。</p>

<pre><code>lsmod | grep hci
The output should look something like this:

uhci_hcd               22404  0 
ehci_hcd               34688  0 
usbcore               134576  5 oss_usb,usbhid,uhci_hcd,ehci_hcd
If it only shows uhci and not ehci, then the usb 2.0 drivers just aren't loading）
</code></pre>

<p>下面事识别旧hdd。 这里比较麻烦，因为hdd上做了raid， 能看到的事linux lvm.
不知道fs type. 导致 mount  不成功。</p>

<h3>详细挂载步骤：…</h3>

<h4>查看设备名称。</h4>

<pre><code>cd /dev/disk

tree -L 2
.
|-- by-id
|   |-- scsi-3600508e0000000003c1ef40bba1a8f04 -&gt; ../../sda
|   |-- scsi-3600508e0000000003c1ef40bba1a8f04-part1 -&gt; ../../sda1
|   |-- scsi-3600508e0000000003c1ef40bba1a8f04-part2 -&gt; ../../sda2
|   |-- usb-WDC_WD25_03ABYX-01WERA0_D577A9016003 -&gt; ../../sdb
|   |-- usb-WDC_WD25_03ABYX-01WERA0_D577A9016003-part1 -&gt; ../../sdb1
|   `-- usb-WDC_WD25_03ABYX-01WERA0_D577A9016003-part2 -&gt; ../../sdb2
|-- by-label
|   `-- boot -&gt; ../../sdb1
|-- by-path
|   |-- pci-0000:00:1a.7-usb-0:1:1.0-scsi-0:0:0:0 -&gt; ../../sdb
|   |-- pci-0000:00:1a.7-usb-0:1:1.0-scsi-0:0:0:0-part1 -&gt; ../../sdb1
|   |-- pci-0000:00:1a.7-usb-0:1:1.0-scsi-0:0:0:0-part2 -&gt; ../../sdb2
|   |-- pci-0000:02:00.0-scsi-0:1:0:0 -&gt; ../../sda
|   |-- pci-0000:02:00.0-scsi-0:1:0:0-part1 -&gt; ../../sda1
|   `-- pci-0000:02:00.0-scsi-0:1:0:0-part2 -&gt; ../../sda2
`-- by-uuid
    |-- 6e483701-3665-4369-b304-a0b997ca810d -&gt; ../../sda1
    `-- f38282ea-3a5b-4b90-b48b-2b8573b08d9e -&gt; ../../sdb1

可以看出， sdb1, sdb2 就是usb 连接的hdd。
</code></pre>

<h4>挂载失败</h4>

<pre><code>mkdir /mnt/u2
mount /dev/sdb2 /mnt/u2 失败，尝试不同文件系统也不能成功。
</code></pre>

<p>使用 fdlisk 查看。</p>

<pre><code>[root@p3100221 log]# /sbin/fdisk -l

Disk /dev/sda: 250.4 GB, 250450280448 bytes
255 heads, 63 sectors/track, 30448 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes

   Device Boot      Start         End      Blocks   Id  System
/dev/sda1   *           1          32      257008+  83  Linux
/dev/sda2              33       30448   244316520   8e  Linux LVM

Disk /dev/sdb: 251.0 GB, 251059544064 bytes
255 heads, 63 sectors/track, 30522 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes

   Device Boot      Start         End      Blocks   Id  System
/dev/sdb1   *           1          32      257008+  83  Linux
/dev/sdb2              33       30448   244316520   8e  Linux LVM
</code></pre>

<p> 由此可以断定， /dev/sdb2y而是一个逻辑分区。 因为做了raid的原因。
所以不可以用 mount -t
的方式挂载，而`而应该吧逻辑分区挂到某地方,而这种分区通常名字叫 /dev/VolGroup 之类</p>

<h4>识别</h4>

<p>/dev里看到一个 VolGroup, 里面有2,3个文件， 是一个整体。</p>

<h5>为什么有2个Linux LVM, 却只有一个 VolGroup?</h5>

<p>由此想到，两个电脑上本来都有各自LVM， VolGroup重名也说不定。
网上搜帖子进一步应证明我的想法。 网上找到一些方法改名。下面事我的做法。</p>

<pre><code>[root@p3100221 dev]# /usr/sbin/vgscan 
Reading all physical volumes.  This may take a while...
Found volume group "VolGroup" using metadata type lvm2
Found volume group "VolGroup" using metadata type lvm2
</code></pre>

<h4>重命名VolGroup</h4>

<p>查看uuid， 根据uuid重命名.</p>

<pre><code>[root@p3100221 dev]# /usr/sbin/vgs -v
Finding all volume groups
Finding volume group "VolGroup"
Archiving volume group "VolGroup" metadata (seqno 3).
Archiving volume group "VolGroup" metadata (seqno 3).
Creating volume group backup "/etc/lvm/backup/VolGroup" (seqno 3).
Finding volume group "VolGroup"
Archiving volume group "VolGroup" metadata (seqno 3).
Archiving volume group "VolGroup" metadata (seqno 3).
Creating volume group backup "/etc/lvm/backup/VolGroup" (seqno 3).
VG       Attr   Ext    #PV #LV #SN VSize   VFree VG UUID                               
VolGroup wz--n- 32.00M   1   2   0 232.97G    0  DS7moo-4w7q-ehNa-hT23-8Xvo-52eu-dP11PE
VolGroup wz--n- 32.00M   1   2   0 232.97G    0  VlR1DC-Biky-Yh9g-NVs1-SiMd-yz54-moVblp
</code></pre>

<p>将VlR1DC-Biky-Yh9g-NVs1-SiMd-yz54-moVblp 重命名为 VolGroup01</p>

<pre><code>[root@p3100221 dev]# /usr/sbin/vgrename VlR1DC-Biky-Yh9g-NVs1-SiMd-yz54-moVblp VolGroup01
Volume group "VolGroup" successfully renamed to "VolGroup01"
</code></pre>

<p>至此, 我们就可以看到2个group，但相应文件并没产生， （/dev/VolGroup01
有， /dev/VolGroupm没有了）</p>

<pre><code>重新产生文件
/usr/sbin/lvchange VolGroup01 -a y   #means activate VolGroup01

/usr/sbin/lvscan
</code></pre>

<h4>现在可以挂在了h</h4>

<pre><code>mount /dev/VolGroup01/lv_root /mnt/u1
mount /dev/VolGroup/lv_root   /mnt/u2
</code></pre>

<h4>千万主注意，</h4>

<p>因为fstab里使用了这个名称，所以，用完一定要确保原本的VolGroup依然存在</p>

<pre><code>umount /mnt/u1
umount /mnt/u2
/usr/sbin/vgrename VolGroup VolGroupold
/usr/sbin/vgrename VolGroup01 VolGroup

做这个操作因为我们的VolGroup刚好不是新hdd了。 
</code></pre>

<p>如果 umount /mnt/u2 时出现 device is busy</p>

<pre><code> /sbin/fuser  -m -v /mnt/u2
</code></pre>

<p>杀死用它的进程即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[server issues fixing]]></title>
    <link href="http://dexterdeng.github.com/blog/2013/02/05/server-issues-fixing/"/>
    <updated>2013-02-05T15:30:00+08:00</updated>
    <id>http://dexterdeng.github.com/blog/2013/02/05/server-issues-fixing</id>
    <content type="html"><![CDATA[<h4>set xid back from a old db</h4>

<pre><code>update new_db.businesses, old_db.businesses 
set new_db.businesses.xid = old_db.businesses.xid 
where new_db.businesses.id  =  old_db.businesses.id ;
</code></pre>

<h4>bla_path(:format => :js) 会出现xxx.js, 到服务器后，就会出现404.</h4>

<p>这是nginx造成的。
解决：</p>

<pre><code>location ~* ^.+\.(jpg|jpeg|js|gif|css)$ {
    root /var/www/rails/blanee/development/public;
  access_log off;
  expires 30d;
}

讲js拿出来, 否则每次.js就跑到public/javascripts


location ~ ^/(javascripts)/ { # rails3 用 assets
    root /var/www/rails/blanee/development/public;
  access_log off;
  expires 30d;
}

location ~* ^.+\.(jpg|jpeg|gif|css)$ {
    root /var/www/rails/blanee/development/public;
  access_log off;
  expires 30d;
}
</code></pre>

<h4>Loading&#8230; 会爆 index not matched 错，</h4>

<p>Loading&#8230; 会爆 index not matched 错，</p>

<p>所以， i18n翻译文件里， 不要用连续的点.来作为键的一部分。</p>

<pre><code>Error message:

string not matched

Exception class:

IndexError
</code></pre>

<h4>create temp  table</h4>

<pre><code>CREATE TABLE table2 AS (SELECT * FROM table1)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby 1.9.3 env]]></title>
    <link href="http://dexterdeng.github.com/blog/2013/01/19/ruby-1-dot-9-3-env/"/>
    <updated>2013-01-19T15:32:00+08:00</updated>
    <id>http://dexterdeng.github.com/blog/2013/01/19/ruby-1-dot-9-3-env</id>
    <content type="html"><![CDATA[<h3>downgrade rvm</h3>

<pre><code>rvm get 1.10.1  
这很重要， 否则就会出现以下#1问题。
</code></pre>

<ol>
<li>install rvm .</li>
</ol>


<pre><code>rvm list known
rvm install ruby-1.9.3 
rvm list
</code></pre>

<p>结果有问题:</p>

<pre><code>rvm rubies

 * ree-1.8.7-2011.03 [ x86_64 ]
   /usr/local/rvm/scripts/list: line 329: /usr/local/rvm/rubies/ruby-1.9.2-p290/config: 没有那个文件或目录
ruby-1.9.2-p290 [  ]
   /usr/local/rvm/scripts/list: line 329: /usr/local/rvm/rubies/ruby-1.9.3-p374/config: 没有那个文件或目录
ruby-1.9.3-p374 [  ]
   /usr/local/rvm/scripts/list: line 329: /usr/local/rvm/rubies/ruby-1.9.3-rc1/config: 没有那个文件或目录
ruby-1.9.3-rc1 [  ]
</code></pre>

<p>解决：</p>

<pre><code>rvm get stable
rvm reinstall ruby-1.9.3-rc1
</code></pre>

<p>又有问题:</p>

<pre><code>/usr/bin/env: bash: No such file or directory
</code></pre>

<p>解决：</p>

<pre><code>rvm reload
rvm reinstall ruby-1.9.3-rc1
</code></pre>

<p>搞定，将其他问题ruby全部重新安装。</p>

<pre><code>rvm reinstall ruby-1.9.2-p290  
rvm reinstall ruby-1.9.3-374
</code></pre>

<h3>install elasticsearch</h3>

<pre><code>wget http://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-0.20.2.tar.gz
tar -xzvf elasticsearch-0.20.2.tar.gz 
mv elasticsearch-0.20.2 elasticsearch
mv elasticsearch /usr/local/share/
curl -L http://github.com/elasticsearch/elasticsearch-servicewrapper/tarball/master | tar -xz
mv *servicewrapper*/service /usr/local/share/elasticsearch/bin/
rm -Rf *servicewrapper*
/usr/local/share/elasticsearch/bin/service/elasticsearch install
/etc/init.d/elasticsearch start
</code></pre>

<h3>配置nginx</h3>

<p>更改 passenger_ruby和passenger_root后， 启动出现如下问题。</p>

<pre><code># /sbin/service nginx restart

停止 nginx：                                               [确定]
启动 nginx：nginx: [alert] Unable to start the Phusion Passenger watchdog because its executable (/usr/local/rvm/gems/ruby-1.9.3-p362/gems/passenger-3.0.19/agents/PassengerWatchdog) does not exist. This probably means that your Phusion Passenger installation is broken or incomplete, or that your 'passenger_root' directive is set to the wrong value. Please reinstall Phusion Passenger or fix your 'passenger_root' directive, whichever is applicable. (-1: Unknown error)
                                                           [确定]
</code></pre>

<p>解决：</p>

<pre><code>passenger-config --root 
rake nginx
</code></pre>

<h4>还有问题：cannot load such file &#8211; bundler</h4>

<p>Error:</p>

<pre><code>Error message:
cannot load such file -- bundler
</code></pre>

<p>Solution:</p>

<pre><code>#passenger_root /usr/local/rvm/gems/ree-1.8.7-2011.03/gems/passenger-2.2.15;
#passenger_root /usr/local/rvm/gems/ree-1.8.7-2011.03/gems/passenger-3.0.5;

passenger_root /usr/local/rvm/gems/ruby-1.9.3-p362/gems/passenger-3.0.19;

#passenger_ruby /usr/local/rvm/rubies/ree-1.8.7-2011.03/bin/ruby;
#passenger_ruby /usr/local/rvm/rubies/ruby-1.9.3-p362/bin/ruby;
passenger_ruby /usr/local/rvm/wrappers/ruby-1.9.3-p362/ruby;
</code></pre>

<p>yg b</p>

<pre><code>rails_spawn_method conservative;
passenger_user_switching on;
passenger_default_user nginx;
passenger_default_group nginx;
passenger_max_pool_size 45;
</code></pre>

<p>关键事这两句：</p>

<pre><code>#passenger_ruby /usr/local/rvm/rubies/ruby-1.9.3-p362/bin/ruby;
passenger_ruby /usr/local/rvm/wrappers/ruby-1.9.3-p362/ruby;
</code></pre>

<p>使用wrappers里的ruby</p>

<h3>install node.js + juggernaut ###</h3>

<p>I tried python3.3 with node 0.8.18,  0.8.* , doesn&#8217;t works.</p>

<pre><code>git clone https://github.com/joyent/node.git
git branch --track v0.6 origin/v0.6
git checkout v0.6
./configure
make
make install
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[crontab issues with rvm ]]></title>
    <link href="http://dexterdeng.github.com/blog/2013/01/18/crontab-issues-with-rvm/"/>
    <updated>2013-01-18T17:45:00+08:00</updated>
    <id>http://dexterdeng.github.com/blog/2013/01/18/crontab-issues-with-rvm</id>
    <content type="html"><![CDATA[<p>I encountered these issues today.</p>

<ol>
<li>I can&#8217;t set default rvm to different users. like hudson and nginx.</li>
</ol>


<p>solution:</p>

<pre><code>PATH=/usr/kerberos/sbin:/usr/local/rvm/gems/ree-1.8.7-2011.03/bin:/usr/local/rvm/gems/ree-1.8.7-2011.03@global/bin:/usr/local/rvm/rubies/ree-1.8.7-2011.03/bin:/usr/local/rvm/bin:/usr/kerberos/bin:/usr/local/bin:/bin:/usr/bin:/home/blabla/bin
[[ -s "/usr/local/rvm/scripts/rvm" ]] &amp;&amp; . "/usr/local/rvm/scripts/rvm" # Load RVM function
rvm ree-1.8.7-2011.03 --default
</code></pre>

<ol>
<li><p>after I did #1, I encountered another issue. nginx user can&#8217;t run
crontab -l or crontab -l. it spotted  something like that:</p>

<p> user (nginx) are not allowed to access to (crontab) because of pam configuration</p></li>
</ol>


<p>solution:</p>

<pre><code>#
# The PAM configuration file for the cron daemon
#
#
#auth      sufficient pam_env.so          # Comment that line
#auth       required   pam_rootok.so    # Comment that line

auth       sufficient pam_rootok.so       # Add that line
auth       required   pam_env.so        # Add that line

auth       include    system-auth
account    required   pam_access.so
account    include    system-auth
session    required   pam_loginuid.so
session    include    system-auth
</code></pre>

<p>   and then, I can run crontab -e now.</p>

<ol>
<li>nginx can&#8217;t use rvm stuff.</li>
</ol>


<p>solution.</p>

<pre><code>/usr/local/rvm/bin/rake-ree-1.8.7-2011.03 can run the rake tasks directly
</code></pre>

<p>  I added a task to edit crontab  , replace <code>/usr/bin/env ruby</code> with <code>/usr/local/rvm/bin/rake-ree-1.8.7-2011.03</code></p>

<pre><code>desc "correct crontab "
task :cron =&gt; :environment do
  oc = `crontab -l`
  #nrake = "/Users/mac/.rbenv/shims/rake"
  nrake = "/usr/local/rvm/bin/rake-ree-1.8.7-2011.03"
  oc = oc.split("\n").map{|l|
    l.gsub("/usr/bin/env rake", nrake)
  }
  cf = File.new("#{RAILS_ROOT}/tmp/nc.txt", "w")
  cf.puts oc.join("\n")
  cf.close

  `crontab &lt; #{RAILS_ROOT}/tmp/nc.txt`
end
</code></pre>

<p>  and then , I add this to deploy script.</p>

<pre><code>namespace :deploy do
desc "Update the crontab file"
  task :update_crontab, :roles =&gt; :db do
    run "cd #{release_path} &amp;&amp; whenever --update-crontab #{application} &amp;&amp; rake sys:cron RAILS_ENV=production"
  end
end 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[install hudson]]></title>
    <link href="http://dexterdeng.github.com/blog/2013/01/16/install-hudson/"/>
    <updated>2013-01-16T16:58:00+08:00</updated>
    <id>http://dexterdeng.github.com/blog/2013/01/16/install-hudson</id>
    <content type="html"><![CDATA[<h4>亲信官方文档， 导致错误</h4>

<p>官方这么说： http://wiki.hudson-ci.org/display/HUDSON/Installing+Hudson+using+RPM+repository</p>

<pre><code>Installation
sudo wget -O /etc/yum.repos.d/hudson.repo http://hudson-ci.org/redhat/hudson.repo
sudo yum check-update
sudo yum install hudson
</code></pre>

<p>错！</p>

<p>第一行命令执行完， 得到一下结果：</p>

<pre><code>Loaded plugins: fastestmirror, security
Loading mirror speeds from cached hostfile
 * base: dist1.800hosting.com
 * epel: mirrors.servercentral.net
 * extras: mirror.rackspace.com
 * rpmforge: mirror.teklinks.com
 * updates: mirror.raystedman.net
hudson/primary_db                                                                                                                                           | 5.0 kB     00:00     
http://hudson-ci.org/redhat/repodata/f6063d9778b5261845bb4845b277fe48b0a24b657c9cd21e7fc37f017642bb5b-primary.sqlite.bz2: [Errno -3] Error performing checksum
Trying other mirror.
Error: failure: repodata/f6063d9778b5261845bb4845b277fe48b0a24b657c9cd21e7fc37f017642bb5b-primary.sqlite.bz2 from hudson: [Errno 256] No more mirrors to try.
</code></pre>

<p>无论执行何yum命令，都会出现这个结果。</p>

<p>解决：</p>

<pre><code>rm /etc/yum.repos.d/hudson.repo
</code></pre>

<p>删掉yum.repos.d里hudson记录即可</p>

<h3>继续，重新开始</h3>

<h4>安装JDK</h4>

<pre><code>yum search java #找到最新，java

yum install java-1.6.0-openjdk.x86_64 java-1.6.0-openjdk-devel.x86_64
</code></pre>

<h4>安装hudson</h4>

<pre><code>找到http://hudson-ci.org/redhat/RPMS/noarch/ 最新hudson rpm 按住包

wget http://hudson-ci.org/redhat/RPMS/noarch/hudson-3.0.0-1.1.noarch.rpm
</code></pre>

<p>配置：安装完之后，你可以在/etc/sysconfig/hudson设置启动用户（涉及到执行构建的权限），hudson主目录。</p>

<h4>启动hudson</h4>

<pre><code>/sbin/service hudson start
</code></pre>

<p>open http://66.135.35.84:8080/
choose plugins to install and click <code>instann</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[网站攻击实例]]></title>
    <link href="http://dexterdeng.github.com/blog/2013/01/16/wang-zhan-gong-ji-shi-li/"/>
    <updated>2013-01-16T00:06:00+08:00</updated>
    <id>http://dexterdeng.github.com/blog/2013/01/16/wang-zhan-gong-ji-shi-li</id>
    <content type="html"><![CDATA[<pre><code>http://dev.blanee.com/recherche?city_id=city_32&amp;loc=Casablanca&amp;query=999999.9+union+all+select+0x31303235343830303536%2C0x31303235343830303536%2C0x31303235343830303536%2C0x31303235343830303536%2C0x31303235343830303536%2C0x31303235343830303536%2C0x31303235343830303536%2C0x31303235343830303536%2C0x31303235343830303536--
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[system备忘录]]></title>
    <link href="http://dexterdeng.github.com/blog/2013/01/15/systembei-wang-lu/"/>
    <updated>2013-01-15T15:24:00+08:00</updated>
    <id>http://dexterdeng.github.com/blog/2013/01/15/systembei-wang-lu</id>
    <content type="html"><![CDATA[<ul>
<li>要想fb功能work， 需要确保认证的cacert.pem 在/public/</li>
<li><p>以下配置需要视具体情况变更</p>

<p>ENV[&#8220;MAGICK_CODER_MODULE_PATH&#8221;]=&#8221;/usr/lib64/ImageMagick-6.7.0/modules-Q16/coders/&#8221;</p>

<p>ENV[&#8220;GS_FONTPATH&#8221;] = &#8220;/usr/share/ghostscript/fonts&#8221;</p>

<h1>ENV[&#8220;MAGICK_CONFIGURE_PATH&#8221;]=&#8221;/usr/local/lib/ImageMagick-6.6.3/config&#8221;</h1>

<p>ENV[&#8220;GS_LIB&#8221;] = &#8220;/usr/share/ghostscript/fonts&#8221;</p>

<p>Paperclip.options[:command_path] = &#8220;/usr/bin&#8221;
Paperclip.options[:swallow_stderr] = false</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[install tivoli]]></title>
    <link href="http://dexterdeng.github.com/blog/2013/01/15/install-tivoli/"/>
    <updated>2013-01-15T15:21:00+08:00</updated>
    <id>http://dexterdeng.github.com/blog/2013/01/15/install-tivoli</id>
    <content type="html"><![CDATA[<pre><code>rpm -ivh gsk*
rpm -ivh TIVsm-* tsm-6.2.2.6-P1MH8.x86_64.rpm
yum install compat-libstdc++-33
rpm -ivh TIVsm-* tsm-6.2.2.6-P1MH8.x86_64.rpm
/opt/tivoli/tsm/client/ba/bin/dsmconf
dsmc
/etc/rc.d/init.d/dsmcad restart
/etc/rc.d/init.d/dsmc restart
ps aux | grep dsmc
cat /opt/tivoli/tsm/client/ba/bin/dsmsched.log
/etc/rc.d/init.d/dsmcad restart
/etc/rc.d/init.d/dsmc restart
ps aux | grep dsmc
cat /opt/tivoli/tsm/client/ba/bin/dsmsched.log
cat /opt/tivoli/tsm/client/ba/bin/dsmsched.log
cat /opt/tivoli/tsm/client/ba/bin/dsmsched.log
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[configure php + nginx ]]></title>
    <link href="http://dexterdeng.github.com/blog/2013/01/15/configure-php-plus-nginx/"/>
    <updated>2013-01-15T15:06:00+08:00</updated>
    <id>http://dexterdeng.github.com/blog/2013/01/15/configure-php-plus-nginx</id>
    <content type="html"><![CDATA[<p>nginx装好后， 开始装php。</p>

<p>记住以下几点：</p>

<ul>
<li>务必装教新php, 新版稳定版事5.3.30</li>
<li>php-fpm已加入php核心，安装时注意配置 &#8211;enable-fpm</li>
<li>安装时务必&#8211;with-mysql</li>
<li><p>如果事64位，记住编译时加上 &#8211;with-libdir=lib64 ,否则会出现如下问题:</p>

<p>configure:60376: checking for mysql_error in -lmysqlclient
configure:60395: gcc -o conftest -I/usr/include -g -O2  -Wl,-rpath,/usr/lib/mysql -L/usr/lib/mysql -L/usr/lib  -Wl,-rpath,/usr/kerberos/lib64 -L/usr/kerberos/lib64 -Wl,-rpath,/usr -L/usr conftest.c -lmysqlclient  -lz -lpng -lz -lcurl -lz -lrt -lresolv -lm -ldl -lnsl  -lxml2 -lz -lm -lssl -lcrypto -ldl -lz -lcurl -ldl -lgssapi_krb5 -lkrb5 -lk5crypto -lcom_err -lidn -lssl -lcrypto -lz -lxml2 -lz -lm 1>&amp;5
/usr/bin/ld: skipping incompatible /usr/lib/mysql/libmysqlclient.so when searching for -lmysqlclient
/usr/bin/ld: skipping incompatible /usr/lib/mysql/libmysqlclient.a when searching for -lmysqlclient
/usr/bin/ld: cannot find -lmysqlclient
collect2: ld returned 1 exit status</p></li>
</ul>


<h4>准备</h4>

<pre><code>yum install mysql-devel
yum install nginx
chkconfig --levels 235 nginx on
/etc/init.d/nginx start
</code></pre>

<h4>安装</h4>

<pre><code># yum install   php-mysql php-gd php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc php-magickwand php-magpierss php-mbstring php-mcrypt php-mssql php-shout php-snmp php-soap php-tidy
#yum install php-pecl-apc


wget http://ca1.php.net/distributions/php-5.3.20.tar.gz
tar -xzvf php-5.3.20.tar.gz
 ./configure --with-libdir=lib64  --with-mysql   --enable-fpm    --enable-libgcc   --with-openssl --with-zlib
make
make install

拷贝配置文件

/etc/init.d/php-fpm stop
/etc/init.d/php-fpm start
</code></pre>

<ul>
<li><p>Then open <code>/etc/php.ini</code> and set <code>cgi.fix_pathinfo=0</code>:</p></li>
<li><p>you should set date.timezone in /etc/php.ini:</p>

<p>[&#8230;]
[Date]
; Defines the default timezone used by the date functions
; http://www.php.net/manual/en/datetime.configuration.php#ini.date.timezone
date.timezone = &#8220;Europe/Berlin&#8221;
[&#8230;]</p>

<p>从<code>cat /etc/sysconfig/clock</code>可以查到时区</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[postfix mailq 操作]]></title>
    <link href="http://dexterdeng.github.com/blog/2013/01/15/postfix-mailq-cao-zuo/"/>
    <updated>2013-01-15T14:56:00+08:00</updated>
    <id>http://dexterdeng.github.com/blog/2013/01/15/postfix-mailq-cao-zuo</id>
    <content type="html"><![CDATA[<p>如果你要套用其中一笔Queue 中的邮件，可以先用mailq 或postqueue 指令查询出或筛选出你要重新排Queue 的邮件ID，并使用以下指令重新排Queue：</p>

<pre><code>postsuper -r 7B8CE830BD
</code></pre>

<p>若要套用「所有」邮件，可以使用特殊的ALL 关键字：</p>

<pre><code>postsuper -r ALL
</code></pre>

<p>最后再强制重送所有的信件</p>

<pre><code>postqueue -f
</code></pre>

<p>检视剩下多少Queue</p>

<pre><code>postqueue -p
</code></pre>

<p>若还是不行的话… 那就考虑删除掉吧XD</p>

<p>列出目前在 Mail Queue 中的信件</p>

<pre><code>mailq
</code></pre>

<p>删除某一个队列的邮件</p>

<pre><code>postsuper -d queue_id
</code></pre>

<p>删除所有在 Queue 中的邮件</p>

<pre><code>postsuper -d ALL
</code></pre>

<p>删除所有正在deferred 队列中的邮件( 删除曾经发送失败的信)</p>

<pre><code>postsuper -d ALL deferred
</code></pre>

<p>删除所有正在deferred 队列中的邮件( 可看出哪些信被删除了)</p>

<pre><code>find /var/spool/postfix/deferred -type f -exec rm -vf \{\} \;
</code></pre>

<p>删掉「三天以前」无法发出的邮件</p>

<p>    find /var/spool/postfix/deferred -type f -mtime +3 -exec rm -f {} \;</p>

<p>列出目前所有无法发出的邮件</p>

<p>    find /var/spool/postfix/deferred -type f -exec ls -l –time-style=+%Y-%m-%d_%H:%M:%S {} \;</p>

<p>删除超过5 天的&#8221;defer&#8221; 队列中的退信纪录</p>

<p>    find /var/spool/postfix/defer -type f -mtime +5 -exec rm -f {} \;</p>

<p>若你发现在MailQ里面有相同的地址大量寄送垃圾信件时，可以透过下面的方式来挡掉…</p>

<pre><code># vi /etc/postfix/header_checks
# 加入要挡掉的来原信
/^From:.service\@kcg\.gov\.tw/ DISCARD Attack Mail

# postmap -q – regexp:/etc/postfix/header_checks &lt; /etc/postfix/header_checks
# 重新让 Postfix 新 header_checks 生效

# mailq | grep "xxx@abc.com" | cut -d " " -f1 | cut -d'*' -f1 | postsuper -d -
# 删掉所有来自xxx@abc.com的MailQ
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[about Mail Server]]></title>
    <link href="http://dexterdeng.github.com/blog/2013/01/13/about-mail-server/"/>
    <updated>2013-01-13T01:42:00+08:00</updated>
    <id>http://dexterdeng.github.com/blog/2013/01/13/about-mail-server</id>
    <content type="html"><![CDATA[<p>掌握邮件发送技术刻不容缓， 写此篇博客以作备忘。</p>

<h3>postfix 系统安装</h3>

<h4>install mc</h4>

<pre><code>yum install mc
cd /usr/share/mc
</code></pre>

<h4>How should it be</h4>

<pre><code>[root@mail.blanee.net /etc/postfix]# ps aux | grep "postfix"
postfix    744  0.0  0.0  66932  2976 ?        S    12:18   0:00 smtp -t unix -u
postfix   2889  0.0  0.0  67136  3384 ?        D    11:56   0:00 cleanup -z -t unix -u
root      4550  0.0  0.0  66636  2100 ?        Ss    2012   2:13 /usr/libexec/postfix/master
postfix   4563  0.0  0.0  66976  2432 ?        S     2012   4:16 qmgr -l -t fifo -u
postfix   5309  0.0  0.0  66860  3048 ?        S    12:09   0:00 trivial-rewrite -n rewrite -t unix -u
postfix   6277  0.0  0.0  66764  2804 ?        S    11:40   0:00 bounce -z -t unix -u
postfix   6361  0.0  0.0  66932  2936 ?        S    12:02   0:00 smtp -n relay -t unix -u -o smtp_fallback_relay=
postfix   7419  0.0  0.0  66724  2756 ?        S    11:59   0:00 pickup -l -t fifo -u
root      7675  0.0  0.0  61188   784 pts/2    S+   12:19   0:00 grep postfix
postfix   7873  0.0  0.0  66764  2800 ?        S    11:39   0:00 bounce -z -t unix -u
postfix  11515  0.0  0.0  67136  3388 ?        S    12:11   0:00 cleanup -z -t unix -u
postfix  17586  0.0  0.0  66772  2800 ?        S    11:14   0:00 pipe -n bproc -t unix flags=Rq user=bproc argv=/opt/bounceproc/process.pl -f ${sender} -- ${recipient}
postfix  18082  0.0  0.0  67664  2804 ?        S    12:06   0:00 pipe -n bproc -t unix flags=Rq user=bproc argv=/opt/bounceproc/process.pl -f ${sender} -- ${recipient}
postfix  26125  0.0  0.0  67300  3516 ?        S    12:09   0:00 smtpd -n smtp -t inet -u -o stress= -s 2
</code></pre>

<h4>ready</h4>

<p>centos5</p>

<pre><code>rpm -ihv http://dl.fedoraproject.org/pub/epel/5/x86_64/epel-release-5-4.noarch.rpm # or higher
rpm -ihv http://centos.alt.ru/repository/centos/5/x86_64/centalt-release-5-3.noarch.rpm
</code></pre>

<p>centos6</p>

<pre><code>rpm -ihv http://centos.alt.ru/repository/centos/6/x86_64/centalt-release-6-1.noarch.rpm



yum update
yum install postfix


netstat   -tlnp
rpm -e sendmail
yum remove sendmail

tail -f /var/log/maillog
</code></pre>

<h3>integrate opendkim</h3>

<h4>opendkim</h4>

<p>Go to http://www.opendkim.org/ and hit the Download link to download the software. Save it to <code>/usr/local/src</code> on your server. For this HowTo, I used OpenDKIM version 2.4.2, which was released on August 6, 2011.</p>

<p>You’ll also need to install the <code>OpenSSL</code> and <code>Sendmail development</code> packages, because they contain some secret herbs and spices (otherwise known as “libraries”) you need to get OpenDKIM working. Do:</p>

<pre><code>yum install sendmail-devel openssl-devel
</code></pre>

<p>Extract, configure, compile, and install OpenDKIM with:</p>

<pre><code>tar zxvf opendkim-2.4.2.tar.gz
cd opendkim-2.4.2
./configure --sysconfdir=/etc --prefix=/usr/local --localstatedir=/var
make
make install
</code></pre>

<p>Note that the <code>./configure</code> command includes a few very important flags, which will be passed into the startup script that’s created when the configure command runs. The first tells the system where OpenDKIM’s conf file will be located, the second sets the preferred prefix for some other important file locations, and the final one controls the directory where the PID file for OpenDKIM will be stored. If none of this makes any sense to you, that’s ok – just be sure to use those flags when you run configure, since they are the settings used throughout this tutorial.</p>

<p>Also, it’s important to note that the make install command must be performed as root (or using sudo), since it needs to install files files in the <code>/usr/local/bin</code> directory.</p>

<h4>Create a new user and home directory</h4>

<p>Add a new user for DKIM called <code>opendkim</code> with the following options:</p>

<pre><code>useradd -r -g opendkim -G mail -s /sbin/nologin -d /var/run/opendkim -c "OpenDKIM" opendkim
</code></pre>

<p>This command will:</p>

<ul>
<li>create a new system account (-r) and group (-g) called opendkim,</li>
<li>create a home directory (-d) for the new user in /var/run/opendkim,</li>
<li>also add the opendkim to the mail group (-G),</li>
<li>assign no shell access to this user (-s), and</li>
<li>set the account comment to “OpenDKIM (-c).</li>
<li><p>While the proper permissions for this account’s home directory should be set when the user is created, to avoid any permissions issues in further steps, it doesn’t hurt to manually set them with:</p>

<p>chown opendkim:opendkim /var/run/opendkim</p></li>
</ul>


<p>then:</p>

<pre><code>chmod 700 /var/run/opendkim
</code></pre>

<h4>Create working directories</h4>

<p>Make some new directories for OpenDKIM and give them the proper ownership and permissions with:</p>

<pre><code>mkdir -p /etc/opendkim/keys
chown -R opendkim:opendkim /etc/opendkim
chmod -R go-wrx /etc/opendkim/keys
</code></pre>

<h4>Copy the startup script to /etc/init.d/</h4>

<p>Starting with version 2.3.0, OpenDKIM’s source package includes a contrib directory that contains a custom init script (written by yours truly) for use with all RedHat-compatible systems, including Fedora and CentOS. You can copy it to your /etc/init.d/ directory to make starting, stopping, restarting, and reloading OpenDKIM easy. Just do:</p>

<pre><code>cp /usr/local/src/opendkim-2.4.2/contrib/init/redhat/opendkim /etc/init.d/
</code></pre>

<p>Now set the correct permissions for the init script with:</p>

<pre><code>chmod 755 /etc/init.d/opendkim
</code></pre>

<h4>Generate keys for signing</h4>

<p>Now you’re getting to the good part. You need to generate a <code>private</code> and a <code>public</code> key for each of the domains for which you wish to sign mail. The private key is stored away from prying eyes on your server, while the public key gets published in your domain’s DNS records so that receiving mail servers can verify your DKIM-signed mail. If you’re hard-core, you can build the keys manually. Or, you can use the fancy script included with <code>OpenDKIM</code> to do it for you. I’ve manually generated enough keys in my life and have nothing to prove, so I use the script.</p>

<p>Before running this script, decide now what the name of your selector is going to be. A selector is a unique keyword that is associated with both keys (public and private), included in all the signatures, and published in your DNS records. For simplicity, I use the word default as my default selector. Not very creative, but it’s effective. Feel free to choose something different, but if you do, you’ll need to use it consistently throughout your setup. Also, while this should go without saying, you should use your mail domain instead of example.com throughout the following steps.</p>

<p>Create your keys with:</p>

<pre><code>mkdir /etc/opendkim/keys/tiaoboo.com
/usr/sbin/opendkim-genkey -D /etc/opendkim/keys/tiaoboo.com/ -d tiaoboo.com -s default
chown -R opendkim:opendkim /etc/opendkim/keys/tiaoboo.com
mv /etc/opendkim/keys/tiaoboo.com/default.private /etc/opendkim/keys/tiaoboo.com/default
</code></pre>

<p>You can do a man <code>opendkim-genkey</code> if you’re interested in what additional options are available when creating your keys. In this example, I used the <code>-D</code> (directory) option, the <code>-d</code> (domain) option, and the <code>-s</code> (selector) options. That’s all you need to get this going.</p>

<h4>Edit configuration files</h4>

<p>You’re getting really close now. You need to create or edit four files:</p>

<ul>
<li><code>/etc/opendkim.conf</code> – OpenDKIM’s main configuration file</li>
<li><code>/etc/opendkim/KeyTable</code> – a list of keys available for signing</li>
<li><code>/etc/opendkim/SigningTable</code> - a list of domains and accounts allowed to sign</li>
<li><code>/etc/opendkim/TrustedHosts</code> – a list of servers to “trust” when signing or verifying</li>
</ul>


<p>Use your favorite text editor to create an <code>/etc/opendkim.conf</code> file that looks like this:</p>

<pre><code>##
## opendkim.conf -- configuration file for OpenDKIM filter
##

AutoRestart             Yes
AutoRestartRate         10/1h
Canonicalization        relaxed/simple
ExternalIgnoreList      refile:/etc/opendkim/TrustedHosts
InternalHosts           refile:/etc/opendkim/TrustedHosts
KeyTable                refile:/etc/opendkim/KeyTable
LogWhy                  Yes
Mode                    sv
PidFile                 /var/run/opendkim/opendkim.pid
SignatureAlgorithm      rsa-sha256
SigningTable            refile:/etc/opendkim/SigningTable
Socket                  inet:8891@localhost
Syslog                  Yes
SyslogSuccess           Yes
TemporaryDirectory      /var/tmp
UMask                   022
UserID                  opendkim:opendkim
</code></pre>

<p>You can do man <code>opendkim.conf</code> for more information on each of the options.</p>

<p>Next, you’ll need to create the three text files that you just mentioned in your config file. First, using your favorite text editor, create an <code>/etc/opendkim/KeyTable</code> file that looks like this:</p>

<pre><code>default._domainkey.tiaoboo.com tiaoboo.com:default:/etc/opendkim/keys/tiaoboo.com/default
</code></pre>

<p>The <code>KeyTable</code> file tells <code>OpenDKIM</code> where to find your keys. Each entry in the  <code>KeyTable</code> file is a single line for each key location</p>

<pre><code>(for example, all of the text in the above example should be on a single line in your file). If you’re going to use multiple keys (to sign mail for virtual domains with different keys, for example), you’ll need to create a separate line in the KeyTable file for each domain.
</code></pre>

<p>Next, create an <code>/etc/opendkim/SigningTable</code> file that looks like this:</p>

<pre><code>*@tiaoboo.com default._domainkey.tiaoboo.com
</code></pre>

<p>The <code>SigningTable</code> file tells <code>OpenDKIM</code> how to use your keys, as in which senders should use which selectors for their signatures. In the above example, I’m saying that everyone (*) sending mail from the server “tiaoboo.com” should use the selector named “default.” It’s important to note that the <code>*</code> wildcard symbol will only work if the SigningTable option uses the refile: prefix before the filename (see the <code>opendkim.conf</code> documentation for more details).</p>

<p>Now create an <code>/etc/opendkim/TrustedHosts</code> file that looks like this:</p>

<pre><code>127.0.0.1/8
tiaoboo.com
</code></pre>

<p>The TrustedHosts file tells <code>OpenDKIM</code> who to let use your keys. Because it’s referenced by the ExternalIgnoreList directive in your conf file, OpenDKIM will ignore this list of hosts when verifying incoming mail. And, because it’s also referenced by the InternalHosts directive, this same list of hosts will be considered “internal,” and OpenDKIM will sign their outgoing mail.</p>

<p><code>IMPORTANT:</code> Make sure you list the IP address for localhost (<code>127.0.0.1</code>) in the TrustedHosts file or OpenDKIM won’t sign mail sent from this server. If you have multiple servers on the same network that relay mail through this server and you want to sign their mail as well, they must be listed in the TrustedHosts file. Put each entry on its own line. An entry can be a hostname, domain name (e.g. “toaoboo.com”), IP address, an IPv6 address (including an IPv4 mapped address), or a CIDR-style IP specification (e.g. “192.168.1.0/24″).</p>

<p>It should also go without saying (but I’ll say it anyway) that if you’re planning to sign outgoing mail for remote hosts, your Postfix should have been previously configured to allow relaying for those hosts, as “explained” here… although, when referring to Postfix’s programmer-centric documentation, I generally use the term “explain” very loosely.</p>

<h4>Edit your Postfix configuration</h4>

<p>Now you’re ready to add the following lines to your <code>Postfix main.cf</code> file, which will make Postfix aware of <code>OpenDKIM</code> and allow it to sign and verify mail:</p>

<pre><code>smtpd_milters           = inet:127.0.0.1:8891
non_smtpd_milters       = $smtpd_milters
milter_default_action   = accept
</code></pre>

<p>If you’re running a <code>version of Postfix prior to 2.6</code>, you may also need to add:</p>

<pre><code>milter_protocol   = 2
</code></pre>

<p>See http://www.postfix.org/MILTER_README.html#version for more info.</p>

<h4>Start OpenDKIM and restart Postfix</h4>

<p>It’s time to fire things up! Assuming you’re using bash, do:</p>

<pre><code>hash -r
</code></pre>

<p>to rehash your shell so you can find the init script.</p>

<p>Now start OpenDKIM with:</p>

<pre><code>service opendkim start
</code></pre>

<p>You should get a message that says:</p>

<pre><code>Starting OpenDKIM Milter:     [  OK  ]
</code></pre>

<p>However, if you get an error message such as:</p>

<pre><code>Starting OpenDKIM Milter: opendkim: /etc/opendkim.conf: configuration error at line 6: unrecognized parameter
</code></pre>

<p>don’t freak out. You probably just mistyped something in one of the config files. Go to the line number of the file listed, and check your work against the example(s) in this HowTo. Then try starting up OpenDKIM again.</p>

<p>Once it starts, refresh Postfix with:</p>

<pre><code>postfix reload
</code></pre>

<p>If everything looks good, I recommend running <code>chkconfig on OpenDKIM</code> to make sure it starts when you boot your server:</p>

<pre><code>chkconfig --level 2345 opendkim on
</code></pre>

<p>If things didn’t go right, try some of these startup troubleshooting tips before moving on.</p>

<h4>Startup troubleshooting tips</h4>

<ul>
<li><p>Tip 1: The best advice I can give when troubleshooting any mail issues (including OpenDKIM) is to start a second shell session in another window and do:</p>

<p>tail -f /var/log/maillog</p></li>
</ul>


<p>while you’re starting, stopping, and/or restarting OpenDKIM and Postfix. This allows you to see more details about any errors in your configuration.</p>

<ul>
<li>Tip 2: To get the most verbose information from OpenDKIM, make sure the LogWhy option in your /etc/opendkim.conf file is uncommented and set to Yes. If your outgoing mail isn’t getting signed and you want to know why, this should tell you.</li>
</ul>


<h4>The Most Important Step: Adding DNS Records</h4>

<p>Now that your mail server is signing outgoing mail and verifying incoming mail, you’ll need to put some information in your DNS records to tell other mail servers how your keys are set up, and provide the public key for them to check that your mail is properly signed. Do:</p>

<pre><code>cat /etc/opendkim/keys/tiaoboo.com/default.txt
</code></pre>

<p>The output should look something like this:</p>

<pre><code>default._domainkey IN TXT "v=DKIM1; g=*; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHY7Zl+n3SUldTYRUEU1BErHkKN0Ya52gazp1R7FA7vN5RddPxW/sO9JVRLiWg6iAE4hxBp42YKfxOwEnxPADbBuiELKZ2ddxo2aDFAb9U/lp47k45u5i2T1AlEBeurUbdKh7Nypq4lLMXC2FHhezK33BuYR+3L7jxVj7FATylhwIDAQAB" ; ----- DKIM default for tiaoboo.com
</code></pre>

<p>If you manage your own DNS or have full access to your domain’s zone file, you’ll need to paste the entire contents of the default.txt file at the bottom of your domain’s zone file. If you’re using a web interface to manage your zone file, be careful that the long lines of the public key don’t wrap and create line-feed characters (or fix them if they do). Otherwise, your public key won’t work.</p>

<p>If you’re using GoDaddy’s Total DNS, the TXT Name would  default._domainkey and the TXT Value would be everything inside the quotes (starting with v=). You can ignore the semi-colon and comments at the end.</p>

<p>If you’re using some other third-party DNS provider, follow their instructions for adding a new TXT Record.</p>

<p>You should also add another TXT Record to your zone file that reads:</p>

<pre><code>_adsp._domainkey.tiaoboo.com    IN    TXT    "dkim=unknown" 3600
_domainkey.tiaoboo.com          IN    TXT    "o=~;*         3600
_spf.tiaoboo.com                IN    TXT    "ip4:66.135.35.84"  600
default._domainkey.tiaoboo.com  IN    TXT    "v=DKIM1; k=rsa;
</code></pre>

<p>p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFkbFiloMnbWBkt/Q9dVTLAqcr536yJj7jmdyZVoMNJXHZrio78OFnGxCGjbJm3iPZ07YXhjhP0YIYi4SdpQD5w8JIB7vrArWLwwJnyL3IsiYrhoiaMFWJRpjnhSf16l/IcoO3+s8HRJOzQrw5HJsNM9KbnOxodYTew+lC4OqZgQIDAQAB&#8221;  1800</p>

<p>This record publishes your Author Domain Signing Practices. “Unknown” is <code>the least strict setting</code>, and the best place to start. You can learn more and tinker with other options later, but most people just use “Unknown” for now, since ADSP is relatively new (as of the writing of this post).</p>

<p>And, as long as you’re messing with your domain’s zone file, now might be a good time to ensure that you already have a valid SPF Record in place. Having both DKIM and SPF in place will increase your chances of having your outgoing mail successfully delivered.</p>

<h4>Testing Things Out</h4>

<p>As I mentioned in my troubleshooting tips, the best way to see that everything is working on the server side is to keep an eye on your <code>/var/log/maillog</code> file. Do a:</p>

<pre><code>tail -f /var/log/maillog
</code></pre>

<p>When OpenDKIM starts (or restarts), you should see lines like:</p>

<pre><code>opendkim[4397]: OpenDKIM Filter: mi_stop=1
opendkim[4397]: OpenDKIM Filter v2.4.2 terminating with status 0, errno = 0
opendkim[27444]: OpenDKIM Filter v2.4.2 starting (args: -x /etc/opendkim.conf)
</code></pre>

<p>When you send a mail that gets successfully signed, you should see:</p>

<pre><code>opendkim[22254]: 53D0314803B: DKIM-Signature header added
</code></pre>

<h4>Further reading</h4>

<p>I have to admit that there wasn’t a whole lot of publicly available information on getting <code>OpenDKIM</code> working with Postfix. Hopefully, this HowTo will make it easier for you than it was for me.</p>

<ul>
<li>DKIM.org – the official site for DomainKeys Identified Mail</li>
<li>OpenDKIM Project Site – the program I used to get DKIM working</li>
<li>Sendmail DKIM – a detailed article from Eland Systems about DKIM. They use the dkim-milter package, upon which OpenDKIM is based. I much prefer the newer OpenDKIM, but this article explains DKIM very well and has some good tips.</li>
<li>Mail-DKIM and DKIM-proxy – my first experiments with DKIM were with these tools. I never got it working quite right, but there’s lots of good info there.</li>
<li>OpenSPF.org – not technically related to DKIM, but it’s another spam-fighting technique that you should be using if you’re sending email</li>
</ul>


<p>Good luck! Pease post in the comments with your successes, questions, or suggestions.</p>

<h3>Upgrading OpenDKIM</h3>

<p>If you’ve followed this guide to compile and install <code>OpenDKIM</code>, and would like to upgrade to a newer version, simply download the updated version (using the download link above), then repeat these steps:</p>

<pre><code>tar zxvf opendkim-2.4.2.tar.gz
cd opendkim-2.4.2
./configure --sysconfdir=/etc --prefix=/usr/local --localstatedir=/var
make
make install
</code></pre>

<p>This will upgrade your OpenDKIM and keep your existing configuration intact. Remember to restart OpenDKIM after your upgrade with:</p>

<pre><code>service opendkim restart
</code></pre>

<p>Do:</p>

<pre><code>tail -f /var/log/maillog
</code></pre>

<p>to verify that the newer version started up with no problems.</p>

<h3>Notice</h3>

<ul>
<li><p>dk-milt 这个进程，启动2个的话，服务器就会瘫痪。 切记</p>

<p>dk-milt  10630     1  0 00:44 ?        00:00:00 /usr/sbin/dk-filter -u dk-milt -p inet:10034@127.0.0.1 -d /etc/mail/domainkeys/domains -s /etc/mail/domainkeys/keys -S mail -b sv -c simple -C bad=r,dns=t,int=t,no=a,miss=r -A -k -l -P /var/run/dk-filter0.pid
nginx    18084 17997  0 00:52 pts/3    00:00:00 grep dk
opendkim 29307     1  0 00:45 ?        00:00:00 /usr/sbin/opendkim -x /etc/opendkim.conf -P /var/run/opendkim/opendkim.pid
opendkim 29309 29307  0 00:45 ?        00:00:00 /usr/sbin/opendkim -x /etc/opendkim.conf -P /var/run/opendkim/opendkim.pid</p></li>
<li><p><code>dkim-filter</code> 是<code>opendkim</code> 的前身，所以， 不需要同时装<code>dkim-filter</code> 和
<code>opendkim</code></p>

<p>DomainKeysis 一种过时的技术（更好的探测技术术语，是一个“历史性协议”）。虽然有些邮件程序可能仍然用DomainKeys签上自己的邮件，该技术已被遗弃，不再被开发。基本上，你不再需要它了。
DKIM(which stands forDomainKeys Internet Mail) 是新标准，  推荐的方法。</p></li>
</ul>


<p>DomainKeys 已经过期， 如果你真想使用它， the only way you should even consider doing do is to first set up DKIM using OpenDKIM (by following the steps in my earlier tutorial), and then set up DomainKeys by re-using and relying on as much of of your DKIM installation as possible.</p>

<p>OpenDKIM 是一个开源C语言库，
由社区努力开发和维护的用来生产 DKIM-aware 应用程序，提供DKIM服务的开源C语言库。</p>

<p>OpenDKIM 是基于开源项目 dkim-milter v2.8.3(最近一次更新为2009-06-03) 的代码基础上开发的， 由 Sendmail, Inc. 开发和维护
OpenDKIM版本是最新的，有人维护的。比之于老掉牙的DomainKeys，很长时间没有更新的 DKIM-Milter 更有活力，似乎也更容易安装和维护</p>

<h3>DK</h3>

<p>在openDKIM 安装后， 就可以着手安装domainKeys了。</p>

<pre><code>rpm -ivh dk-milter-1.0.2-1.x86_64.rpm 
</code></pre>

<p>切记使用服务器上那个，否则装起来很麻烦</p>

<h4>Modify the default dk-milter configuration</h4>

<p>The RPM you installed copied the necessary binaries and default configuration files for dk-milter. However, we won’t be using the default settings. Because you already chose a selector, created keys, and set up your DNS records when you set up OpenDKIM, we can re-use the same selector, keys, and DNS records in dk-milter with a few simple modifications.</p>

<h4>Remember your selector</h4>

<p>When you configured OpenDKIM, you already decided the name of your selector. Your selector is a unique keyword that is associated with both keys (public and private), included in all the signatures, and is published in your DNS records. For simplicity, I chose the word <code>default</code> as my default selector in the OpenDKIM tutorial, and will do the same here. If you chose something different, remember to use it consistently in this tutorial, too. It just needs to be the same as the one you used with OpenDKIM.</p>

<p>Also, while this should go without saying, you should also use your mail domain instead of <code>tiaoboo.com</code> throughout the following steps.</p>

<h4>Edit the dk-milter configuration file</h4>

<p>Use your favorite text editor to open the default dk-milter configuration file, which is located at <code>/etc/sysconfig/dk-milter</code>. By default, all the values in that file are commented out, meaning that unless you change them now, dk-milter will use the settings from its init script when it starts up.</p>

<p>Uncomment and edit the necessary lines in the file so that it appears as follows:</p>

<pre><code># Default values
#
USER="opendkim"
PORT="inet:10035@localhost"
SIGNING_DOMAIN="tiaoboo.com"
SELECTOR_NAME="default"
KEYFILE="/etc/opendkim/keys/${SIGNING_DOMAIN}/${SELECTOR_NAME}"
SIGNER=yes
VERIFIER=no
CANON=simple
REJECTION="bad=r,dns=t,int=t,no=a,miss=r"
EXTRA_ARGS="-h -l -D -i /etc/opendkim/TrustedHosts"
SYSCONFIG="/etc/sysconfig/dk-milter"
MILTER_GROUP="opendkim"

# User configuration
#
#PORT0="inet:10034@localhost"
#SIGNER0=no
#PORT1="inet:10035@localhost"
#VERIFIER1=no
#...
</code></pre>

<p>Notice that we’re referencing the opendkim user and group on lines 3 and 14 of this file, because the directory and private key you previously set up for DKIM is owned (and can only be read by) the opendkim user and group.</p>

<p>Also notice on line 12 that we’re re-using the <code>/etc/opendkim/TrustedHosts</code> file you set up for OpenDKIM. This is comparable to the InternalHosts directive in your OpenDKIM configuration file. You’re telling dk-milter that these domains are internal (with the -i flag), so it’s OK to sign their outgoing mail.</p>

<p>Finally, notice that I left the User configuration settings on lines 16-22 commented out. You can delete them if you want, since we won’t need them for this implementation.</p>

<h4>Edit your Postfix configuration</h4>

<p>Since you already added lines to your Postfix main.cf file to tell Postfix how to interact with OpenDKIM, you can just add the milter information for dk-milter to the end of those same lines. Find the lines in your Postfix main.cf that look like this:</p>

<pre><code>smtpd_milters = inet:localhost:8891
non_smtpd_milters = inet:localhost:8891
</code></pre>

<p>and edit them to look like this:</p>

<pre><code>smtpd_milters = inet:localhost:10035, inet:localhost:8891
non_smtpd_milters = inet:localhost:10035, inet:localhost:8891
</code></pre>

<p><code>Notice that I put the milter info for dk-milter first and for OpenDKIM last</code>. This actually determines the order of each milter’s headers in your outgoing mail (the first shall be last and the last shall be first). I recommend using this order, which places the DKIM signature above the DomainKeys signature in your outgoing email. That way, the receiving mailer will parse the DKIM information (the newer protocol) first.</p>

<h4>Start dk-milter and restart Postfix</h4>

<p>You’re ready to fire things up. Start dk-milter with:</p>

<pre><code># /sbin/service dk-milter start
</code></pre>

<p>You should get a message that says:</p>

<pre><code>Starting DomainKeys milter (dk-filter #0):     [  OK  ]
</code></pre>

<p>If you get an error message, don’t freak out. You probably just mistyped something in one of the config files. Go to the line number of the file listed, and check your work against the example(s) in this tutorial. Then try starting up dk-milter again.</p>

<p>Once dk-milter starts successfully, restart Postfix with:</p>

<pre><code># /sbin/service postfix restart
</code></pre>

<p>If everything looks good, you may want to consider running chkconfig on dk-milter to make sure it starts when you reboot:</p>

<pre><code># /sbin/chkconfig --level 2345 dk-milter on
</code></pre>

<h4>Modifying DNS records</h4>

<p>While DomainKeys (via <code>dk-milter</code>)(yahoo) will rely on the same DNS information as <code>DKIM (via OpenDKIM)</code> for selector information, there is one minor addition and one minor change you need to make to your domain’s DNS records to support the older DomainKeys protocol.</p>

<p>First, you need to add a TXT Record to your zone file that reads:</p>

<pre><code>_domainkey.tiaoboo.com IN TXT "t=y; o=~"
</code></pre>

<p>The <em>domainkey TXT record is slightly comparable to the </em>adsp TXT record you added when setting up DKIM. It basically publishes your DomainKeys policies. The t=y means the domain is in test mode, so only use this setting while you’re testing things out. Once you’ve verified it works, remember to change it to t=n. The o=~ means that some emails from this domain will be signed, but not all. A setting of o=- means that every email from this domain will be signed, and that a messages origin should be in doubt if it comes from this domain unsigned. For now, the safest setting is o=~.</p>

<p>Second, you need to edit the TXT file for your selector and remove the v=DKIM1; and g=*; arguments, as these sometimes cause issues for a few mail servers when they attempt to validate the older DomainKeys.</p>

<h4>Testing Things Out</h4>

<p>As always, the best way to see that everything is working on the server side is to keep an eye on your <code>/var/log/maillog</code> file. Do a:</p>

<pre><code># tail -f /var/log/maillog
</code></pre>

<p>When dk-milter starts (or restarts), you should see lines like:</p>

<pre><code>dk-filter[19535]: Sendmail DomainKeys Filter v1.0.2 starting (args: -u opendkim-milt -p inet:10035@localhost -d /etc/mail/dkim/trusted-hosts -s /etc/mail/domainkeys/keylist -S default -b sv -c simple -C bad=r,dns=t,int=t,no=a,miss=r -h -l -D -k -i /etc/mail/dkim/trusted-hosts -P /var/run/dk-filter0.pid)
</code></pre>

<p>Unlike OpenDKIM, dk-milter doesn’t log anything when you send a mail that gets successfully signed, so the best way to check that your signed mail is being authenticated and that your DNS records are properly set up is to use one of the free testing services. My favorites are:</p>

<ul>
<li>Brandon Checketts Email Validator</li>
<li>Send a signed email to: autorespond+dkim@dk.elandsys.com</li>
<li>Send a signed email to: sa-test@sendmail.net</li>
<li>Send a signed email to: check-auth@verifier.port25.com</li>
</ul>


<p>(you can put all of the test email addresses in the To: field of a single outgoing message to test)
Each of these will tell you if things are working properly, and give you some pointers on troubleshooting if needed. If  Brandon Checketts’ Email Validator gives an error message in the DomainKeys field that reads:</p>

<pre><code>Unable to verify signature
  granularity does not match address
</code></pre>

<p>That probably means the g=*; setting from your selector’s DNS TXT record is either still in your record or that the record is being cached by Brandon’s server. Wait an hour and then try again.</p>

<p>If you have a Gmail account, you can also send a signed message there for a quick and easy test. I like to click the Show Original link (under the Reply drop-down on the right) to see the signed headers. You should see headers for DKIM as well as DomainKeys.</p>

<p>The one result that everyone seems to want is this reply from the verifier.port.25.com test:</p>

<pre><code>==========================================================
Summary of Results
==========================================================
SPF check:          pass
DomainKeys check:   pass
DKIM check:         pass
Sender-ID check:    pass
SpamAssassin check: ham
</code></pre>

<p>If you get that result, then congratulations – you’re signing mail with DKIM and DomainKeys. Sure, it’s a little redundant, but apparently overkill is just your style.</p>

<h3>SPF</h3>

<p>当服务器接收到邮件时会检查域名的SPF记录与客户端IP是否匹配，如匹配就被认为是真实的邮件，不匹配就被认为是假冒的邮件，当然如果对方域名未做SPF记录会被误报。
安装postfix-policyd-spf-perl用以检查域SPF记录并匹配：</p>

<pre><code>yum install perl-Mail-SPF perl-Sys-Hostname-Long
wget https://launchpad.net/postfix-policyd-spf-perl/trunk/release2.010/+download/postfix-policyd-spf-perl-2.010.tar.gz
tar zxvf postfix-policyd-spf-perl-2.010.tar.gz 
mv postfix-policyd-spf-perl-2.010/postfix-policyd-spf-perl /usr/sbin/
chmod +x /usr/sbin/postfix-policyd-spf-perl
</code></pre>

<p>开启postfix-policyd-spf-perl服务：</p>

<pre><code>cat /etc/postfix/master.cf
policy-spf  unix  -       n       n       -       -       spawn
 user=nobody argv=/usr/sbin/postfix-policyd-spf-perl
</code></pre>

<p>编辑Postfix主配置文件添加SPF过滤规则：</p>

<pre><code>#cat /etc/postfix/main.cf
smtpd_recipient_restrictions =
permit_mynetworks,
permit_sasl_authenticated,
reject_unauth_destination,
#reject_unknown_client,
check_policy_service unix:private/policy-spf
</code></pre>

<p>重新加载Postfix配置文件：</p>

<p>/etc/init.d/postfix reload</p>

<p>测试SPF效果：</p>

<pre><code>#下为错误
postfix/policy-spf[15857]: Policy action=PREPEND Received-SPF: softfail (onovps.com: Sender is not authorized by default
#下为正确
postfix/policy-spf[15726]: Policy action=PREPEND Received-SPF: pass (qq.com: Sender is authorized to use 'qq@qq.com'
</code></pre>

<p>Policy-spy默认不阻止验证失败的发件人邮件，会在邮件头部添加Received-SPF: softfail标签，如果要对其处理可使用Postfix过滤规则header_checks进行匹配操作。
添加header_checks匹配规则：</p>

<pre><code>#cat /etc/postfix/header_checks 
</code></pre>

<p>编辑主Postfix主配置文件应用此规则：</p>

<pre><code>#cat main.cf
header_checks = pcre:/etc/postfix/header_checks
</code></pre>

<h4>编辑DNS</h4>

<pre><code>_spf.tiaoboo.com
ip4:66.135.35.84
default._domainkey.tiaoboo.com
v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFkbFiloMnbWBkt/Q9dVTLAqcr536yJj7jmdyZVoMNJXHZrio78OFnGxCGjbJm3iPZ07YXhjhP0YIYi4SdpQD5w8JIB7vrArWLwwJnyL3IsiYrhoiaMFWJRpjnhSf16l/IcoO3+s8HRJOzQrw5HJsNM9KbnOxodYTew+lC4OqZgQIDAQAB     1800 
tiaoboo.com "v=spf1 a mx include:_spf.tiaoboo.com include:_spf.google.com" ~all 600   # the a is important  
tiaoboo.com "google-site-verification=qttqrxdf9j3-h1f2srpiszt1w9giqqygwaflyhleg4q"
</code></pre>

<h4>How to switch domain?</h4>

<ul>
<li><p>edit main.cf, replace all the tiaoboo.com to blabla.net</p></li>
<li><p>generate opendkim keys</p>

<p>mkdir /etc/opendkim/keys/blabla.net
/usr/local/sbin/opendkim-genkey -D /etc/opendkim/keys/blabla.net/ -d blabla.net -s default
chown -R opendkim:opendkim /etc/opendkim/keys/tiaoboo.net
mv /etc/opendkim/keys/tiaoboo.com/default.private /etc/opendkim/keys/tiaoboo.com/default</p></li>
<li><p>Edit <code>/etc/opendkim/SigningTable</code></p>

<p>*@blabla.net default._domainkey.blabla.net</p></li>
<li><p>Edit <code>/etc/opendkim/TrustedHosts</code></p>

<p>127.0.0.1/8
tiaoboo.com
blabla.net</p></li>
<li><p>Add DNS file</p>

<p><em>adsp.</em>domainkey.blabla.com    IN    TXT    &#8220;dkim=unknown&#8221; 3600
<em>domainkey.blabla.com          IN    TXT    &#8220;o=~;*         3600
</em>spf.blabla.com                IN    TXT    &#8220;ip4:66.135.35.84&#8221;  600
default._domainkey.blabla.com  IN    TXT    &#8220;v=DKIM1; k=rsa;
p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDFkbFiloMnbWBkt/Q9dVTLAqcr536yJj7jmdyZVoMNJXHZrio78OFnGxCGjbJm3iPZ07YXhjhP0YIYi4SdpQD5w8JIB7vrArWLwwJnyL3IsiYrhoiaMFWJRpjnhSf16l/IcoO3+s8HRJOzQrw5HJsNM9KbnOxodYTew+lC4OqZgQIDAQAB&#8221;  1800</p></li>
<li><p> restart dk-mailter, opendkim, postfix</p></li>
</ul>


<h4>Issue fixing###</h4>

<ul>
<li><p>X-Authentication-Warning</p>

<p>X-Authentication-Warning: server1.mysite.com: apache set sender to webmaster@mysite.com using -f
X-Authentication-Warning: server1.mysite.com: apache set sender to webmaster@mysite.com using -f
X-Authentication-Warning: p3100221.pubip.serverbeach.com: nginx set sender to noreply@blani.net using -f</p></li>
</ul>


<p>Solution:</p>

<p>   Add apache or nginx to <code>/etc/mail/trusted-users</code></p>

<ul>
<li><p>Email issue, can&#8217;t open admin.</p>

<p>[15-Jan-2013 09:52:49 UTC] PHP Warning:  Cannot modify header information - headers already sent by (output started at /var/www/php/wordpress/wp-content/themes/Blanee/functions.php:52) in /var/www/php/wordpress/wp-content/plugins/nginx-compatibility/nginx-compatibility.php on line 69</p></li>
</ul>


<p>Solution:</p>

<pre><code>there is a space at the end of /var/www/php/wordpress/wp-content/themes/Blanee/functions.php, remove it and it works.:
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[setup new environment]]></title>
    <link href="http://dexterdeng.github.com/blog/2013/01/07/setup-new-environment/"/>
    <updated>2013-01-07T13:32:00+08:00</updated>
    <id>http://dexterdeng.github.com/blog/2013/01/07/setup-new-environment</id>
    <content type="html"><![CDATA[<h3>事前注意</h3>

<pre><code>如果事64位的机器，千万不要像这样随便装东西， 比如 `yum install
</code></pre>

<p>httpd<code>,</code> yum install httpd-devel` ， 这样通常会出奇怪做错。 尽量带上
x86_64</p>

<pre><code>当出现以上问题带来错误时， 记住要卸载所有的安装过的，
</code></pre>

<p>然后用规范的方式重新装。就能救回来了</p>

<h3>install RVM</h3>

<h3>安装系统需要的包</h3>

<pre><code>yum install build-essential openssl curl libcurl3-dev libreadline6 libreadline6-dev git zlib1g zlib1g-dev libssl-dev libyaml-dev libxml2-dev libxslt-dev autoconf automake libtool imagemagick libmagickwand-dev libpcre3-dev libsqlite3-dev


yum install gcc-c++ 
yum install readline-devel
yum install zlib-devel 
yum install openssl-devel 
</code></pre>

<h3>安装mysql</h3>

<pre><code>yum install mysql mysql-server   mysql-devel.x86_64 
/sbin/service mysqld start
/sbin/chkconfig --list mysql
默认即可登陆， 账号root, 密码空
</code></pre>

<p>安装gem是会出现</p>

<pre><code>uninitialized constant MysqlCompat::MysqlRes
/usr/local/rvm/gems/ree-1.8.7-2012.02/gems/activesupport-2.3.8/lib/active_support/dependencies.rb:440:in `load_missing_constant'
/usr/local/rvm/gems/ree-1.8.7-2012.02/gems/activesupport-2.3.8/lib/active_support/dependencies.rb:80:in `const_missing'
/usr/local/rvm/gems/ree-1.8.7-2012.02/gems/activerecord-2.3.8/lib/active_record/connection_adapters/mysql_adapter.rb:9:in `define_all_hashes_method!'
/usr/local/rvm/gems/ree-1.8.7-2012.02/gems/activerecord-2.3.8/lib/active_record/connection_adapters/mysql_adapter.rb:68:in `mysql_connection'
</code></pre>

<p>   /usr/local/rvm/gems/ree-1.8.7-2012.02/gems/activerecord-2.3.8/lib/active_record/connection_adapters/abstract/connection_pool.rb:223:in `send&#8217;</p>

<p>这样的错误，解决办法：</p>

<pre><code>env ARCHFLAGS="-arch x86_64" gem install mysql

安装玩gem 后 ， 安照 `http://www.tmtm.org/en/mysql/ruby/
</code></pre>

<p>提示在安装mysql-ruby</p>

<pre><code>wget http://files.rubyforge.vm.bytemark.co.uk/mysql-ruby/mysql-ruby-2.8.2.tar.gz
tar -xzvf mysql-ruby-2.8.2.tar.gz
cd mysql-ruby-2.8.2
ruby extconf.rb --with-mysql-dir=/usr/local/mysql
make install 
</code></pre>

<p>即可</p>

<h3>安装imagemagick</h3>

<pre><code>yum install libtool-ltdl libtool-ltdl-devel freetype freetype-devel fontconfig-devel
</code></pre>

<p>Centos 5.x</p>

<pre><code>wget http://dl.fedoraproject.org/pub/epel/5/i386/epel-release-5-4.noarch.rpm
wget http://rpms.famillecollet.com/enterprise/remi-release-5.rpm
sudo rpm -Uvh remi-release-5*.rpm epel-release-5*.rpm
</code></pre>

<p>Centos 6.x</p>

<pre><code>wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm
sudo rpm -Uvh remi-release-6*.rpm epel-release-6*.rpm
</code></pre>

<p>Contnue</p>

<pre><code>yum --enablerepo=epel install jasper jasper-libs jasper-devel

yum install OpenEXR-devel.i686 OpenEXR-libs.i686 OpenEXR-devel.x86_64 OpenEXR-libs.x86_64


yum install ImageMagick.x86_64 ImageMagick-devel.x86_64
yum remove ImageMagick  #这种方式可以安装很多依赖包。虽然不够优雅

yum install xz-devel.x86_64
yum install fftw3.x86_64 fftw3-devel.x86_64

wget http://www.imagemagick.org/download/linux/CentOS/x86_64/ImageMagick-6.8.1-9.x86_64.rpm
rpm -Uvh ImageMagick-6.8.1-9.x86_64.rpm

yum install freetype
yum install gd-devel
wget http://www.osresources.com/files/centos-windows-fonts/msfonts.tbz
mkdir /usr/share/fonts/default/TrueType
tar xvjpf msfonts.tbz -C /usr/share/fonts/default/TrueType/


yum install fftw3-devel fontconfig-devel libtool-ltdl-devel -y
/sbin/ldconfig  /usr/local/lib
</code></pre>

<p>=========================================</p>

<pre><code>以上步骤有问题。

yum install libmng-1.0.9-5.1.x86_64
yum install qt-3.3.6-26.el5.x86_64
yum install ghostscript
yum install librsvg2.x86_64  librsvg2-devel.x86_64 
yum install libwmf.x86_64 libwmf-devel.x86_64
yum install ghostscript-devel
yum install bzip2.x86_64  bzip2-devel.x86_64 bzip2-libs.x86_64 lbzip2.x86_64
yum install lcms-devel.x86_64
yum install libXt.x86_64  libXt-devel.x86_64 libXTrap.x86_64  libXTrap-devel.x86_64libXtst-devel.x86_64 libXtst.x86_64
yum install libtiff.x86_64 libtiff-devel.x86_64 


yum -y install gettext-devel
yum -y install libtool*

把本库里ImageMagick.tar.gz里软件全部装好就可使用。 很简单。 rpm -Uvh
</code></pre>

<p>xx 是安装， rpm -e xxx 是卸载.</p>

<p>=========================================</p>

<pre><code>yum install curl.x86_64  curl-devel.x86_64 
gem install curb -v=0.7.8
gem install curb -v=0.7.7.1

yum install libxml++.x86_64 libxml2.x86_64  libxml2-devel.x86_64 libxslt.x86_64 libxslt-devel.x86_64
gem install google-spreadsheet-ruby -v=0.1.5
gem install nokogiri -v=1.5.0
gem install nokogiri -v=1.4.4
gem install nokogiri -v=1.4.3.1
gem install roo -v=1.9.6

yum install aspell.x86_64  aspell-devel.x86_64 enchant-aspell.x86_64 aspell-en.x86_64   aspell-fr.x86_64  
gem install raspell -v=1.2

wget ftp://ftp.gnu.org/gnu/aspell/dict/ar/aspell6-ar-1.2-0.tar.bz2
tar jxf aspell6-ar-1.2-0.tar.bz2
cd aspell6-ar-1.2-0
./configure
make
make install
</code></pre>

<h3>安装nginx</h3>

<h3>integrate passenger with nginx</h3>

<h4>Installing other dependencies</h4>

<p>Both Passenger and Nginx, as one would expect, have various dependencies. The list below is exhaustive for the configuration I outline, but if you compile more modules into Nginx then you may have to install additional prerequisites.</p>

<pre><code>$ apt-get install build-essential libpcre3-dev libssl-dev zlib1g
</code></pre>

<p>Nginx’s HTTP rewrite module requires the PCRE library sources, so it can parse regular expressions in location directives. It also needs the OpenSSL header files for SSL support, and zlib so that responses can be compressed.</p>

<h4>Installing the Passenger gem</h4>

<pre><code>gem install passenger

$ passenger-config --root
/usr/local/lib/ruby/gems/1.9.1/gems/passenger-3.0.17

$ PASSENGER_NGINX_DIR=`passenger-config --root`/ext/nginx
</code></pre>

<h4>Downloading the PCRE source</h4>

<h4>安装PCRE</h4>

<pre><code>$ cd /usr/local/src
$ wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.31.tar.gz
$ tar -xzvf pcre-8.31.tar.gz
$ cd pcre-8.31
$ ./configure 
$ make &amp; make install
$ PCRE_DIR=`pwd`
</code></pre>

<h4>Compiling Nginx</h4>

<pre><code>$ cd /usr/local/src
$ wget http://nginx.org/download/nginx-1.2.4.tar.gz
$ tar -xzvf nginx-1.2.4.tar.gz
$ cd nginx-1.2.4
$ NGINX_SRC_DIR=`pwd`
</code></pre>

<p>安装</p>

<pre><code>$ ./configure \
  --prefix=/usr/local \
  --sbin-path=/usr/local/sbin \
  --conf-path=/etc/nginx/nginx.conf \
  --error-log-path=/var/log/nginx/error.log \
  --http-log-path=/var/log/nginx/access.log \
  --with-http_ssl_module \
  --with-http_gzip_static_module \
  --add-module=$PASSENGER_NGINX_DIR \
  --with-pcre=$PCRE_DIR \
  --with-http_sub_module \
  --with-http_realip_module   --with-http_stub_status_module 
$ make
$ make install
</code></pre>

<p>注意pcre和passenger的位置。 吧passenger编译进去。</p>

<p>编辑nginx</p>

<pre><code>$ chmod +x /etc/init.d/nginx
$ /usr/sbin/update-rc.d -f nginx defaults
</code></pre>

<p>复制conf</p>

<pre><code>$ cd $NGINX_SRC_DIR
$ cp -R conf /etc/nginx
$ mdkir /etc/nginx/conf.d
</code></pre>

<p>Then edit <code>/etc/nginx/nginx.conf</code> and add the following line before the end of the http block.</p>

<pre><code>include /etc/nginx/conf.d/*.conf;
</code></pre>

<p>增加. <code>/etc/nginx/conf.d/000-passenger.conf</code>并增加以下行， 确认具体路径。</p>

<pre><code>passenger_root /usr/local/lib/ruby/gems/1.9.1/gems/passenger-3.0.17; # passenger-config --root 可以输出路径
passenger_ruby /usr/local/bin/ruby;
</code></pre>

<p>最简配置</p>

<pre><code>server {
  listen 80;
  server_name myrackapp.net;
  root /var/www/myrackapp.net/public;
  passenger_enabled on;
  rails_env production;
}
</code></pre>

<p>确认：</p>

<pre><code>$ cd $NGINX_SRC_DIR
$ nginx -V
nginx version: nginx/1.2.4
built by gcc 4.4.3 (Ubuntu 4.4.3-4ubuntu5.1)
TLS SNI support enabled
configure arguments: --prefix=/usr/local --sbin-path=/usr/local/sbin
--conf-path=/etc/nginx/nginx.conf
--error-log-path=/var/log/nginx/error.log
--http-log-path=/var/log/nginx/access.log
--with-pcre=/usr/local/src/pcre-8.31
--add-module=/usr/local/lib/ruby/gems/1.9.1/gems/passenger-3.0.17/ext/nginx
--with-http_ssl_module --with-http_gzip_static_module
--with-http_sub_module
</code></pre>

<p>这样可以看到输出。</p>

<p>以上方法完全可以不用rvmsudo ..install_nginx….</p>

<p>多次实验后，发现， passenger-install-apache2-module  或  passenger-install-nginx-module  这样装才有效果。 这样会在passenger gem包里生产 agent/Passenger&#8230; 文件，有这个nginx 才能跑起来</p>

<pre><code>/usr/local/src/nginx-1.2.4
/usr/local 
--sbin-path=/usr/local/sbin  --conf-path=/etc/nginx/nginx.conf  --error-log-path=/var/log/nginx/error.log  --http-log-path=/var/log/nginx/access.log  --with-pcre=/usr/local/src/pcre-8.31   --with-http_gzip_static_module  --with-http_sub_module
yes


http://extralogical.net/articles/howto-compile-nginx-passenger.html
</code></pre>

<h4>另外</h4>

<p> 如果多环境同时跑， 建议用 nginx + 反向代理 + apache来搞。
两个nginx 很容易出问题， 编译的文件会被破坏掉。</p>

<h4>注意####</h4>

<pre><code>Passenger before v3.0.11 has issues with Ruby 1.9.3, 
</code></pre>

<p>开机自动启动：</p>

<pre><code>chmod +x /etc/init.d/nginx 

[root@p3100221 conf.d]# chkconfig --list nginx
bash: chkconfig: command not found

[root@p3100221 conf.d]# /sbin/chkconfig --list nginx
nginx 服务支持 chkconfig，但它在任何级别中都没有被引用(运行“chkconfig --add nginx”)

[root@p3100221 conf.d]# /sbin/chkconfig --add nginx
[root@p3100221 conf.d]# /sbin/chkconfig --list nginx
nginx           0:关闭    1:关闭    2:关闭    3:关闭    4:关闭    5:关闭    6:关闭

[root@p3100221 conf.d]# /sbin/chkconfig  --level 2345 nginx on

[root@p3100221 conf.d]# /sbin/chkconfig --list nginx
nginx           0:关闭    1:关闭    2:启用    3:启用    4:启用    5:启用    6:关闭
</code></pre>

<h3>install memcache</h3>

<pre><code>wget http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.2-2.el5.rf.x86_64.rpm
rpm -ivh rpmforge-release-0.5.2-2.el5.rf.x86_64.rpm 

yum install --enablerepo=rpmforge  memcached.x86_64 memcached-devel.x86_64 libmemcached.x86_64  libmemcached-devel.x86_64 libmemcache.x86_64 libmemcache-devel.x86_64  perl-Apache-Session-Memcached.noarch perl-Cache-Memcached.noarch perl-Memcached-libmemcached.x86_64 php-pecl-memcache.x86_64  php-pecl-memcached.x86_64  redis.x86_64 rubygem-moneta.noarch 

#用不了这么多， 我是图省事
</code></pre>

<h3>download the rvm</h3>

<pre><code>sudo gem update --system 1.3.7 or rvm install rubygems 1.3.7
</code></pre>

<h3>后续</h3>

<p>安装代码， capistrano，</p>

<h3>FAQ</h3>

<h4>每次更新数据库总会报错</h4>

<pre><code>Sphinx cannot be found on your system. You may need to configure the
following
settings in your config/sphinx.yml file:
  * bin_path
  * searchd_binary_name
  * indexer_binary_name
</code></pre>

<p>解决办法有两个：</p>

<ol>
<li>运行indexer,获得版本号， 然后在sphinx.yml里增加 version: 0.9.9
(e.g.)</li>
<li>升级使用版本较高的sphinx</li>
</ol>


<h4>没错rake都出现一条错</h4>

<pre><code>WARNING: 'require 'rake/rdoctask'' is deprecated.  Please use 'require 'rdoc/task' (in RDoc 2.4.2+)' instead.
at /usr/local/rvm/gems/ree-1.8.7-2011.03/gems/rake-0.9.2.2/lib/rake/rdoctask.rb
</code></pre>

<p>解决办法：</p>

<pre><code>gem install rdoc
</code></pre>

<p>编辑Rakefile</p>

<pre><code>#require 'rake/rdoctask'
require 'rdoc/task'
</code></pre>

<h4>sync files</h4>

<p>Local folder to remote folder, using a domain, an IP address and a server defined in the SSH configuration file:</p>

<pre><code>rsync -rtvz source_folder/ user@domain:/path/to/destination_folder/
rsync -rtvz source_folder/ user@xxx.xxx.xxx.xxx:/path/to/destination_folder/
rsync -rtvz source_folder/ server_name:/path/to/destination_folder/
</code></pre>

<p>Remote folder to local folder, using a domain, an IP address and a server defined in the SSH configuration file:</p>

<pre><code>rsync -rtvz user@domain:/path/to/source_folder/ destination_folder/
rsync -rtvz user@xxx.xxx.xxx.xxx:/path/to/source_folder/ destination_folder/
rsync -rtvz server_name:/path/to/source_folder/ destination_folder/


nohup rsync -rtvz blabla@66.66.66.66:/var/www/rails/blabla/shared/uploads  /var/www/rails/blabla/shared
# copy uploads to shared/uploads.  
#fast. and continual, 25G, 5 hours. 
</code></pre>

<p>exclude folders</p>

<pre><code>rsync -rtv --exclude 'directory' source_folder/ destination_folder/
rsync -rtv --exclude 'file.txt' source_folder/ destination_folder/
rsync -rtv --exclude 'path/to/directory' source_folder/ destination_folder/
rsync -rtv --exclude 'path/to/file.txt' source_folder/ destination_folder/
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一点经验教训]]></title>
    <link href="http://dexterdeng.github.com/blog/2013/01/07/%5B%3F%5D-dian-jing-yan-jiao-xun/"/>
    <updated>2013-01-07T12:27:00+08:00</updated>
    <id>http://dexterdeng.github.com/blog/2013/01/07/[?]-dian-jing-yan-jiao-xun</id>
    <content type="html"><![CDATA[<h3>流量刚过15k，一个新的里程碑</h3>

<p>坚持做两年的项目， 流量上了一个新阶段。</p>

<p>很多问题随之产生， 这里就最近的一些经验。稍微总结一下。</p>

<h3>数据库session表超大，导致dump文件超大，11G</h3>

<p>最近数据库dump文件超大，一直欣慰的以为数据量大了，实则可笑至极。</p>

<p>在解决这个问题过程中， 我找到几个方案。</p>

<h4>数据量真的庞大</h4>

<p>对数据做partition, 这样数据库更稳定。</p>

<h4>有很庞大的表</h4>

<p>如果数据不是很有价值，那么应该删除过期数据。
如果数据很有价值，那么应该分表了。</p>

<h3>Perconas是个好东西， 更省cpu</h3>

<p>以后有机会，要换这个数据库。</p>

<h3>数据库恢复时，手动restore 了一些表，</h3>

<p>发现一下行其实是有作用的，否则容易出现法语乱码:</p>

<blockquote><p>&#8211; MySQL dump 10.11
  &#8211;
  &#8211; Host: localhost    Database: blabla</p>

<hr />

<p>  &#8211; Server version5.0.92-log</p>

<p>/<em>!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT </em>/;
  /<em>!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS </em>/;
  /<em>!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION </em>/;
  /<em>!40101 SET NAMES utf8 </em>/;
  /<em>!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE </em>/;
  /<em>!40103 SET TIME_ZONE=&#8217;+00:00&#8217; </em>/;
  /<em>!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 </em>/;
  /<em>!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS,
  FOREIGN_KEY_CHECKS=0 </em>/;
  /<em>!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#8217;NO_AUTO_VALUE_ON_ZERO&#8217;
  </em>/;
  /<em>!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 </em>/;</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mySQL优化 my.ini 配置说明]]></title>
    <link href="http://dexterdeng.github.com/blog/2012/11/08/mysqlyou-hua-my-dot-ini-pei-zhi-shuo-ming/"/>
    <updated>2012-11-08T15:19:00+08:00</updated>
    <id>http://dexterdeng.github.com/blog/2012/11/08/mysqlyou-hua-my-dot-ini-pei-zhi-shuo-ming</id>
    <content type="html"><![CDATA[<p>[mysqld]
port = 3306
serverid = 1</p>

<p>socket = /tmp/mysql.sock</p>

<p>skip-name-resolve</p>

<blockquote><p>禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。但需要注意，如果开启该选项，则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求！注：如果用winform连接mysql，加入此句速度会有很大的提升</p></blockquote>

<p>skip-locking</p>

<blockquote><p>避免MySQL的外部锁定，减少出错几率增强稳定性。</p></blockquote>

<p>back_log = 384</p>

<blockquote><p>指定MySQL可能的连接数量。当MySQL主线程在很短的时间内接收到非常多的连接请求，该参数生效，主线程花费很短的时间检查连接并且启动一个新线程。 back_log参数的值指出在MySQL暂时停止响应新请求之前的短时间内多少个请求可以被存在堆栈中。 如果系统在一个短时间内有很多连接，则需要增大该参数的值，该参数值指定到来的TCP/IP连接的侦听队列的大小。不同的操作系统在这个队列大小上有它自己的限制。 试图设定back_log高于你的操作系统的限制将是无效的。默认值为50。对于Linux系统推荐设置为小于512的整数。</p></blockquote>

<p>key_buffer_size = 32M</p>

<blockquote><p>key_buffer_size这对MyISAM表来说非常重要。如果只是使用MyISAM表，可以把它设置为可用内存的 30-40%。合理的值取决于索引大小、数据量以及负载 — 记住，MyISAM表会使用操作系统的缓存来缓存数据，因此需要留出部分内存给它们，很多情况下数据比索引大多了。尽管如此，需要总是检查是否所有的 key_buffer 都被利用了 — .MYI 文件只有 1GB，而 key_buffer 却设置为 4GB 的情况是非常少的。这么做太浪费了。如果你很少使用MyISAM表，那么也保留低于 16-32MB 的key_buffer_size 以适应给予磁盘的临时表索引所需。</p></blockquote>

<p>innodb_buffer_pool_size = 2.4G</p>

<blockquote><p>这对Innodb表来说非常重要。Innodb相比MyISAM表对缓冲更为敏感。MyISAM可以在默认的 key_buffer_size 设置下运行的可以，然而Innodb在默认的innodb_buffer_pool_size 设置下却跟蜗牛似的。由于Innodb把数据和索引都缓存起来，无需留给操作系统太多的内存，因此如果只需要用Innodb的话则可以设置它高达 70-80% 的可用内存。– 如果你的数据量不大，并且不会暴增，那么无需把innodb_buffer_pool_size 设置的太大了。</p></blockquote>

<p>innodb_additional_pool_size = 20M</p>

<blockquote><p>这个选项对性能影响并不太多，至少在有差不多足够内存可分配的操作系统上是这样。不过如果你仍然想设置为 20MB(或者更大)，因此就需要看一下Innodb其他需要分配的内存有多少。</p></blockquote>

<p>innodb_log_file_size = 512M</p>

<blockquote><p>在高写入负载尤其是大数据集的情况下很重要。这个值越大则性能相对越高，但是要注意到可能会增加恢复时间。我经常设置为64-512MB，根据服务器大小而异。</p></blockquote>

<p>innodb_log_buffer_size =16M</p>

<blockquote><p>默认的设置在中等强度写入负载以及较短事务的情况下，服务器性能还可以。如果存在更新操作峰值或者负载较大，就应该考虑加大它的值了。如果它的值设置太高了，可能会浪费内存 — 它每秒都会刷新一次，因此无需设置超过1秒所需的内存空间。通常8-16MB就足够了。越小的系统它的值越小。</p></blockquote>

<p>innodb_flush_logs_at_trx_commit = 2</p>

<blockquote><p>是否为Innodb比MyISAM慢1000倍而头大?看来也许你忘了修改这个参数了。默认值是 1，这意味着每次提交的更新事务(或者每个事务之外的语句)都会刷新到磁盘中，而这相当耗费资源，尤其是没有电池备用缓存时。很多应用程序，尤其是从 MyISAM转变过来的那些，把它的值设置为 2 就可以了，也就是不把日志刷新到磁盘上，而只刷新到操作系统的缓存上。日志仍然会每秒刷新到磁盘中去，因此通常不会丢失每秒1-2次更新的消耗。如果设置为0就快很多了，不过也相对不安全了 — MySQL服务器崩溃时就会丢失一些事务。设置为2指挥丢失刷新到操作系统缓存的那部分事务。</p></blockquote>

<p>max_allowed_packet = 4M
thread_stack = 256K
table_cache = 128K
sort_buffer_size = 6M</p>

<blockquote><p>查询排序时所能使用的缓冲区大小。注意：该参数对应的分配内存是每连接独占！如果有100个连接，那么实际分配的总共排序缓冲区大小为100 × 6 ＝ 600MB。所以，对于内存在4GB左右的服务器推荐设置为6-8M。</p></blockquote>

<p>read_buffer_size = 4M</p>

<blockquote><p>读查询操作所能使用的缓冲区大小。和sort_buffer_size一样，该参数对应的分配内存也是每连接独享！</p></blockquote>

<p>join_buffer_size = 8M</p>

<blockquote><p>联合查询操作所能使用的缓冲区大小，和sort_buffer_size一样，该参数对应的分配内存也是每连接独享！</p></blockquote>

<p>myisam_sort_buffer_size = 64M
table_cache = 512</p>

<blockquote><p>打开一个表的开销可能很大。例如MyISAM把MYI文件头标志该表正在使用中。你肯定不希望这种操作太频繁，所以通常要加大缓存数量，使得足以最大限度地缓存打开的表。它需要用到操作系统的资源以及内存，对当前的硬件配置来说当然不是什么问题了。如果你有200多个表的话，那么设置为 1024 也许比较合适(每个线程都需要打开表)，如果连接数比较大那么就加大它的值。我曾经见过设置为100,000的情况。</p></blockquote>

<p>thread_cache_size = 64</p>

<blockquote><p>线程的创建和销毁的开销可能很大，因为每个线程的连接/断开都需要。我通常至少设置为 16。如果应用程序中有大量的跳跃并发连接并且 Threads_Created 的值也比较大，那么我就会加大它的值。它的目的是在通常的操作中无需创建新线程。</p></blockquote>

<p>query_cache_size = 64M</p>

<blockquote><p>指定MySQL查询缓冲区的大小。可以通过在MySQL控制台执行以下命令观察：</p>

<blockquote><p>SHOW VARIABLES LIKE ‘%query_cache%’;
SHOW STATUS LIKE ‘Qcache%’;
如果Qcache_lowmem_prunes的值非常大，则表明经常出现缓冲不够的情况；如果Qcache_hits的值非常大，则表明查询缓冲使用非常频繁，如果该值较小反而会影响效率，那么可以考虑不用查询缓冲；Qcache_free_blocks，如果该值非常大，则表明缓冲区中碎片很多。</p></blockquote></blockquote>

<p>tmp_table_size = 256M
max_connections = 768</p>

<blockquote><p>指定MySQL允许的最大连接进程数。如果在访问论坛时经常出现Too Many Connections的错误提 示，则需要增大该参数值。</p></blockquote>

<p>max_connect_errors = 10000000
wait_timeout = 10</p>

<blockquote><p>指定一个请求的最大连接时间，对于4GB左右内存的服务器可以设置为5-10。</p></blockquote>

<p>thread_concurrency = 8</p>

<blockquote><p>该参数取值为服务器逻辑CPU数量×2，在本例中，服务器有2颗物理CPU，而每颗物理CPU又支持H.T超线程，所以实际取值为4 × 2 ＝ 8</p></blockquote>

<p>skip-networking</p>

<blockquote><p>开启该选项可以彻底关闭MySQL的TCP/IP连接方式，如果WEB服务器是以远程连接的方式访问MySQL数据库服务器则不要开启该选项！否则将无法正常连接！</p></blockquote>

<p>show status 命令</p>

<p>含义如下:</p>

<ul>
<li>aborted_clients 客户端非法中断连接次数</li>
<li>aborted_connects 连接mysql失败次数</li>
<li>com_xxx xxx命令执行次数,有很多条</li>
<li>connections 连接mysql的数量</li>
<li>Created_tmp_disk_tables 在磁盘上创建的临时表</li>
<li>Created_tmp_tables 在内存里创建的临时表</li>
<li>Created_tmp_files 临时文件数</li>
<li>Key_read_requests The number of requests to read a key block from the cache</li>
<li>Key_reads The number of physical reads of a key block from disk</li>
<li>Max_used_connections 同时使用的连接数</li>
<li>Open_tables 开放的表</li>
<li>Open_files 开放的文件</li>
<li>Opened_tables 打开的表</li>
<li>Questions 提交到server的查询数</li>
<li>Sort_merge_passes 如果这个值很大,应该增加my.cnf中的sort_buffer值</li>
<li>Uptime 服务器已经工作的秒数</li>
</ul>


<h3>提升性能的建议:</h3>

<ol>
<li>如果opened_tables太大,应该把my.cnf中的table_cache变大</li>
<li>如果Key_reads太大,则应该把my.cnf中key_buffer_size变大.可以用Key_reads/Key_read_requests计算出cache失败率</li>
<li>如果Handler_read_rnd太大,则你写的SQL语句里很多查询都是要扫描整个表,而没有发挥索引的键的作用</li>
<li>如果Threads_created太大,就要增加my.cnf中thread_cache_size的值.可以用Threads_created/Connections计算cache命中率</li>
<li>如果Created_tmp_disk_tables太大,就要增加my.cnf中tmp_table_size的值,用基于内存的临时表代替基于磁盘的</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to enhance mysql performance]]></title>
    <link href="http://dexterdeng.github.com/blog/2012/11/08/how-to-enhance-mysql-performance/"/>
    <updated>2012-11-08T11:36:00+08:00</updated>
    <id>http://dexterdeng.github.com/blog/2012/11/08/how-to-enhance-mysql-performance</id>
    <content type="html"><![CDATA[<h3>1. use <code>show processlist</code></h3>

<pre><code>show processlist
</code></pre>

<p>it can  check the connections,  and find the slow sql.  You can add index to some columns if needed</p>

<h3>2. check <code>/var/lib/mysql/slow.log</code></h3>

<pre><code>cat /var/lib/mysql/slow.log
</code></pre>

<p>it can  check the connections,  and find the slow sql.  You can add index to some columns if needed</p>

<p>e.g.</p>

<pre><code>SELECT DISTINCT(events.id), events.* FROM `events`   left join  event_users on event_users.event_id = events.id  WHERE ((events.user_id = 444 or (event_users.user_id = 444 and event_users.status != 0)) and (events.end_at &lt; '2012-11-07'  or (events.end_at  is null and events.start_at  &lt; '2012-11-07' )))  LIMIT 0, 20;
</code></pre>

<p>it took 5 s for the first running.</p>

<pre><code>show index from events
</code></pre>

<p>I got this:</p>

<pre><code>    +--------+------------+---------------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+
| Table  | Non_unique | Key_name                  | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment |
+--------+------------+---------------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+
| events |          0 | PRIMARY                   |            1 | id          | A         |        2180 |     NULL | NULL   |      | BTREE      |         | 
| events |          1 | index_events_on_permalink |            1 | permalink   | A         |        2180 |     NULL | NULL   | YES  | BTREE      |         | 
+--------+------------+---------------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+
2 rows in set (0.00 sec)


mysql&gt; show index from event_users;
+-------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+
| Table       | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment |
+-------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+
| event_users |          0 | PRIMARY  |            1 | id          | A         |        7671 |     NULL | NULL   |      | BTREE      |         | 
+-------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+
</code></pre>

<p>I decide to add index to event_users&#8217;s event_id, user_id, events.user_id</p>

<pre><code>ALTER TABLE `events` ADD INDEX ( `user_id` )
ALTER TABLE `event_users` ADD INDEX ( `user_id` )
ALTER TABLE `event_users` ADD INDEX ( `event_id` )
</code></pre>

<h3>2. use <code>mysqltuner.pl</code>###</h3>

<p><code>mysqltuner.pl</code> is a perl script. it can connect the mysql and check
issues, and recommend you how to enhance it.</p>

<pre><code>$ perl mysqltuner.pl 

 &gt;&gt;  MySQLTuner 1.2.0 - Major Hayden &lt;major@mhtx.net&gt;
 &gt;&gt;  Bug reports, feature requests, and downloads at http://mysqltuner.com/
 &gt;&gt;  Run with '--help' for additional options and output filtering
Please enter your MySQL administrative login: root
Please enter your MySQL administrative password: 

-------- General Statistics --------------------------------------------------
[--] Skipped version check for MySQLTuner script
[OK] Currently running supported MySQL version 5.0.92-log
[OK] Operating on 64-bit architecture

-------- Storage Engine Statistics -------------------------------------------
[--] Status: -Archive -BDB -Federated +InnoDB -ISAM -NDBCluster 
[--] Data in MyISAM tables: 105M (Tables: 55)
[--] Data in InnoDB tables: 18G (Tables: 938)
[!!] Total fragmented tables: 6

-------- Security Recommendations  -------------------------------------------
[OK] All database users have passwords assigned

-------- Performance Metrics -------------------------------------------------
[--] Up for: 4d 20h 36m 22s (38M q [91.609 qps], 65K conn, TX: 78B, RX: 5B)
[--] Reads / Writes: 88% / 12%
[--] Total buffers: 3.3G global + 42.2M per thread (100 max threads)
[OK] Maximum possible memory usage: 7.5G (31% of installed RAM)
[OK] Slow queries: 0% (77/38M)
[OK] Highest usage of available connections: 43% (43/100)
[OK] Key buffer size / total MyISAM indexes: 140.0M/143.8M
[OK] Key buffer hit rate: 99.9% (218M cached / 122K reads)
[OK] Query cache efficiency: 36.7% (12M cached / 32M selects)
[!!] Query cache prunes per day: 2340785
[OK] Sorts requiring temporary tables: 0% (5K temp sorts / 2M sorts)
[!!] Joins performed without indexes: 109640
[!!] Temporary tables created on disk: 29% (700K on disk / 2M total)
[OK] Thread cache hit rate: 99% (43 created / 65K connections)
[!!] Table cache hit rate: 0% (100 open / 27K opened)
[OK] Open file limit used: 0% (15/20K)
[OK] Table locks acquired immediately: 99% (30M immediate / 30M locks)
[!!] InnoDB data size / buffer pool: 18.5G/3.0G

-------- Recommendations -----------------------------------------------------
General recommendations:
    Run OPTIMIZE TABLE to defragment tables for better performance
    Adjust your join queries to always utilize indexes
    When making adjustments, make tmp_table_size/max_heap_table_size equal
    Reduce your SELECT DISTINCT queries without LIMIT clauses
    Increase table_cache gradually to avoid file descriptor limits
Variables to adjust:
    query_cache_size (&gt; 100M)
    join_buffer_size (&gt; 32.0M, or always use indexes with joins)
    tmp_table_size (&gt; 100M)
    max_heap_table_size (&gt; 100M)
    table_cache (&gt; 100)
    innodb_buffer_pool_size (&gt;= 18G)
</code></pre>

<h4>1. <code>Run OPTIMIZE TABLE to defragment tables for better performance</code></h4>

<p>Run this command:</p>

<pre><code>mysqlcheck -u root --auto-repair --optimize --all-databases
</code></pre>

<p>You can usually fix the table by issuing:</p>

<pre><code>mysqlcheck -A -r -p
</code></pre>

<p>Restart MYSQL Server:</p>

<pre><code>/etc/init.d/mysql restart
</code></pre>

<p>use https://tools.percona.com/wizard/ to generate a conf file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to integrate mmseg with elasticsearch]]></title>
    <link href="http://dexterdeng.github.com/blog/2012/11/06/how-to-integrate-mmseg-with-elasticsearch/"/>
    <updated>2012-11-06T11:46:00+08:00</updated>
    <id>http://dexterdeng.github.com/blog/2012/11/06/how-to-integrate-mmseg-with-elasticsearch</id>
    <content type="html"><![CDATA[<h3>install elasticsearch-analysis-mmseg</h3>

<pre><code>cd /usr/local/elasticsearch
sudo bin/plugin -install medcl/elasticsearch-analysis-mmseg/1.1.0  
</code></pre>

<h3>configure</h3>

<pre><code>vi /etc/elasticsearch/elasticsearch.yml
</code></pre>

<p>add these lines in the elasticsearch</p>

<pre><code>index:
  analysis:
    analyzer:
      mmseg
        alias: [news_analyzer, mmseg_analyzer]
        type: org.elasticsearch.index.analysis.MMsegAnalyzerProvider
    tokenizer:
      mmseg_maxword:
        type: mmseg
        seg_type: "max_word"
      mmseg_complex:
        type: mmseg
        seg_type: "complex"
      mmseg_simple:
        type: mmseg
        seg_type: "simple"
index.analysis.analyzer.default.type : "mmseg"
</code></pre>

<p>it means define analyzer and tokenizer. and the default analyzer</p>

<h3>restart elasticsearch</h3>

<pre><code>/etc/init.d/elasticsearch stop
/etc/init.d/elasticsearch start
</code></pre>

<h3>How to use it</h3>

<pre><code>tire.mapping do
  indexes :id,             type: 'integer', :index =&gt; :not_analyzed
  indexes :name,           type: "string", index: "analyzed", analyzer: "mmseg"
  indexes :pinyin,         type: 'string'
  indexes :created_at,     type: 'date'
  indexes :updated_at,     type: 'date'
end       
</code></pre>

<h3>regenerate index</h3>

<pre><code>$ RAILS_ENV=production bundle exec rake environment tire:import CLASS='Article' FORCE=true
</code></pre>

<p>http://www.elasticsearch.org/guide/reference/modules/plugins.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[delete blank lines and replace with enter]]></title>
    <link href="http://dexterdeng.github.com/blog/2012/11/05/delete-blank-lines-and-replace-with-enter/"/>
    <updated>2012-11-05T17:00:00+08:00</updated>
    <id>http://dexterdeng.github.com/blog/2012/11/05/delete-blank-lines-and-replace-with-enter</id>
    <content type="html"><![CDATA[<h3>How to replace , with enter</h3>

<p>e.g. How to replace <code>aaa,bbb,ccc</code> with</p>

<pre><code>aaa
bbb
ccc
</code></pre>

<p>open it with <code>mvim</code></p>

<pre><code>:%s/,/^M/g
# you need to type CTRL-V &lt;CR&gt; to get a ^M here
</code></pre>

<h3>How to remove blank lines</h3>

<pre><code>:%g/^\s*$/d
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[skip vadation or skip flilter]]></title>
    <link href="http://dexterdeng.github.com/blog/2012/11/03/skip-vadation-or-skip-flilter/"/>
    <updated>2012-11-03T17:09:00+08:00</updated>
    <id>http://dexterdeng.github.com/blog/2012/11/03/skip-vadation-or-skip-flilter</id>
    <content type="html"><![CDATA[<h3>run all validation and filters</h3>

<pre><code>@user.save
</code></pre>

<h3>run  no validation but all filters</h3>

<pre><code>@user.save(false)
</code></pre>

<h3>run  no validation and no filters</h3>

<pre><code>@user.send(:update_without_callbacks)
</code></pre>

<p>since it is private, you need to use send</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Never call save/update in before/after_save filter]]></title>
    <link href="http://dexterdeng.github.com/blog/2012/11/03/never-call-save-update-attribute-update-attributes-in-after-slash-after-save-filter/"/>
    <updated>2012-11-03T17:02:00+08:00</updated>
    <id>http://dexterdeng.github.com/blog/2012/11/03/never-call-save-update-attribute-update-attributes-in-after-slash-after-save-filter</id>
    <content type="html"><![CDATA[<p>Check two source code first:</p>

<pre><code>def update_attribute(name, value)
  send(name.to_s + '=', value)
  save(false)
end
</code></pre>

<p>and</p>

<pre><code> def update_attributes(attributes)
   self.attributes = attributes
   save
 end
</code></pre>

<p>Check the source code, these 2 <code>update</code> methods contain <code>save</code>. in fact,
<code>update</code>  always means <code>save</code>.  these methods can&#8217;t be in <code>after_save</code>,
<code>before_save</code>. as  if you call <code>save</code>, <code>save</code> trigger  <code>before_save/after_save</code>,
and <code>before_save/after_save</code> trigger <code>save</code> again. &#8230;  No ending.</p>

<p>This is very important.</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mysql | 脑波网]]></title>
  <link href="http://dexterdeng.github.com/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://dexterdeng.github.com/"/>
  <updated>2013-01-15T13:50:28+08:00</updated>
  <id>http://dexterdeng.github.com/</id>
  <author>
    <name><![CDATA[Dexter Deng]]></name>
    <email><![CDATA[dexterdeng@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mySQL优化 my.ini 配置说明]]></title>
    <link href="http://dexterdeng.github.com/blog/2012/11/08/mysqlyou-hua-my-dot-ini-pei-zhi-shuo-ming/"/>
    <updated>2012-11-08T15:19:00+08:00</updated>
    <id>http://dexterdeng.github.com/blog/2012/11/08/mysqlyou-hua-my-dot-ini-pei-zhi-shuo-ming</id>
    <content type="html"><![CDATA[<p>[mysqld]
port = 3306
serverid = 1</p>

<p>socket = /tmp/mysql.sock</p>

<p>skip-name-resolve</p>

<blockquote><p>禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。但需要注意，如果开启该选项，则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求！注：如果用winform连接mysql，加入此句速度会有很大的提升</p></blockquote>

<p>skip-locking</p>

<blockquote><p>避免MySQL的外部锁定，减少出错几率增强稳定性。</p></blockquote>

<p>back_log = 384</p>

<blockquote><p>指定MySQL可能的连接数量。当MySQL主线程在很短的时间内接收到非常多的连接请求，该参数生效，主线程花费很短的时间检查连接并且启动一个新线程。 back_log参数的值指出在MySQL暂时停止响应新请求之前的短时间内多少个请求可以被存在堆栈中。 如果系统在一个短时间内有很多连接，则需要增大该参数的值，该参数值指定到来的TCP/IP连接的侦听队列的大小。不同的操作系统在这个队列大小上有它自己的限制。 试图设定back_log高于你的操作系统的限制将是无效的。默认值为50。对于Linux系统推荐设置为小于512的整数。</p></blockquote>

<p>key_buffer_size = 32M</p>

<blockquote><p>key_buffer_size这对MyISAM表来说非常重要。如果只是使用MyISAM表，可以把它设置为可用内存的 30-40%。合理的值取决于索引大小、数据量以及负载 — 记住，MyISAM表会使用操作系统的缓存来缓存数据，因此需要留出部分内存给它们，很多情况下数据比索引大多了。尽管如此，需要总是检查是否所有的 key_buffer 都被利用了 — .MYI 文件只有 1GB，而 key_buffer 却设置为 4GB 的情况是非常少的。这么做太浪费了。如果你很少使用MyISAM表，那么也保留低于 16-32MB 的key_buffer_size 以适应给予磁盘的临时表索引所需。</p></blockquote>

<p>innodb_buffer_pool_size = 2.4G</p>

<blockquote><p>这对Innodb表来说非常重要。Innodb相比MyISAM表对缓冲更为敏感。MyISAM可以在默认的 key_buffer_size 设置下运行的可以，然而Innodb在默认的innodb_buffer_pool_size 设置下却跟蜗牛似的。由于Innodb把数据和索引都缓存起来，无需留给操作系统太多的内存，因此如果只需要用Innodb的话则可以设置它高达 70-80% 的可用内存。– 如果你的数据量不大，并且不会暴增，那么无需把innodb_buffer_pool_size 设置的太大了。</p></blockquote>

<p>innodb_additional_pool_size = 20M</p>

<blockquote><p>这个选项对性能影响并不太多，至少在有差不多足够内存可分配的操作系统上是这样。不过如果你仍然想设置为 20MB(或者更大)，因此就需要看一下Innodb其他需要分配的内存有多少。</p></blockquote>

<p>innodb_log_file_size = 512M</p>

<blockquote><p>在高写入负载尤其是大数据集的情况下很重要。这个值越大则性能相对越高，但是要注意到可能会增加恢复时间。我经常设置为64-512MB，根据服务器大小而异。</p></blockquote>

<p>innodb_log_buffer_size =16M</p>

<blockquote><p>默认的设置在中等强度写入负载以及较短事务的情况下，服务器性能还可以。如果存在更新操作峰值或者负载较大，就应该考虑加大它的值了。如果它的值设置太高了，可能会浪费内存 — 它每秒都会刷新一次，因此无需设置超过1秒所需的内存空间。通常8-16MB就足够了。越小的系统它的值越小。</p></blockquote>

<p>innodb_flush_logs_at_trx_commit = 2</p>

<blockquote><p>是否为Innodb比MyISAM慢1000倍而头大?看来也许你忘了修改这个参数了。默认值是 1，这意味着每次提交的更新事务(或者每个事务之外的语句)都会刷新到磁盘中，而这相当耗费资源，尤其是没有电池备用缓存时。很多应用程序，尤其是从 MyISAM转变过来的那些，把它的值设置为 2 就可以了，也就是不把日志刷新到磁盘上，而只刷新到操作系统的缓存上。日志仍然会每秒刷新到磁盘中去，因此通常不会丢失每秒1-2次更新的消耗。如果设置为0就快很多了，不过也相对不安全了 — MySQL服务器崩溃时就会丢失一些事务。设置为2指挥丢失刷新到操作系统缓存的那部分事务。</p></blockquote>

<p>max_allowed_packet = 4M
thread_stack = 256K
table_cache = 128K
sort_buffer_size = 6M</p>

<blockquote><p>查询排序时所能使用的缓冲区大小。注意：该参数对应的分配内存是每连接独占！如果有100个连接，那么实际分配的总共排序缓冲区大小为100 × 6 ＝ 600MB。所以，对于内存在4GB左右的服务器推荐设置为6-8M。</p></blockquote>

<p>read_buffer_size = 4M</p>

<blockquote><p>读查询操作所能使用的缓冲区大小。和sort_buffer_size一样，该参数对应的分配内存也是每连接独享！</p></blockquote>

<p>join_buffer_size = 8M</p>

<blockquote><p>联合查询操作所能使用的缓冲区大小，和sort_buffer_size一样，该参数对应的分配内存也是每连接独享！</p></blockquote>

<p>myisam_sort_buffer_size = 64M
table_cache = 512</p>

<blockquote><p>打开一个表的开销可能很大。例如MyISAM把MYI文件头标志该表正在使用中。你肯定不希望这种操作太频繁，所以通常要加大缓存数量，使得足以最大限度地缓存打开的表。它需要用到操作系统的资源以及内存，对当前的硬件配置来说当然不是什么问题了。如果你有200多个表的话，那么设置为 1024 也许比较合适(每个线程都需要打开表)，如果连接数比较大那么就加大它的值。我曾经见过设置为100,000的情况。</p></blockquote>

<p>thread_cache_size = 64</p>

<blockquote><p>线程的创建和销毁的开销可能很大，因为每个线程的连接/断开都需要。我通常至少设置为 16。如果应用程序中有大量的跳跃并发连接并且 Threads_Created 的值也比较大，那么我就会加大它的值。它的目的是在通常的操作中无需创建新线程。</p></blockquote>

<p>query_cache_size = 64M</p>

<blockquote><p>指定MySQL查询缓冲区的大小。可以通过在MySQL控制台执行以下命令观察：</p>

<blockquote><p>SHOW VARIABLES LIKE ‘%query_cache%’;
SHOW STATUS LIKE ‘Qcache%’;
如果Qcache_lowmem_prunes的值非常大，则表明经常出现缓冲不够的情况；如果Qcache_hits的值非常大，则表明查询缓冲使用非常频繁，如果该值较小反而会影响效率，那么可以考虑不用查询缓冲；Qcache_free_blocks，如果该值非常大，则表明缓冲区中碎片很多。</p></blockquote></blockquote>

<p>tmp_table_size = 256M
max_connections = 768</p>

<blockquote><p>指定MySQL允许的最大连接进程数。如果在访问论坛时经常出现Too Many Connections的错误提 示，则需要增大该参数值。</p></blockquote>

<p>max_connect_errors = 10000000
wait_timeout = 10</p>

<blockquote><p>指定一个请求的最大连接时间，对于4GB左右内存的服务器可以设置为5-10。</p></blockquote>

<p>thread_concurrency = 8</p>

<blockquote><p>该参数取值为服务器逻辑CPU数量×2，在本例中，服务器有2颗物理CPU，而每颗物理CPU又支持H.T超线程，所以实际取值为4 × 2 ＝ 8</p></blockquote>

<p>skip-networking</p>

<blockquote><p>开启该选项可以彻底关闭MySQL的TCP/IP连接方式，如果WEB服务器是以远程连接的方式访问MySQL数据库服务器则不要开启该选项！否则将无法正常连接！</p></blockquote>

<p>show status 命令</p>

<p>含义如下:</p>

<ul>
<li>aborted_clients 客户端非法中断连接次数</li>
<li>aborted_connects 连接mysql失败次数</li>
<li>com_xxx xxx命令执行次数,有很多条</li>
<li>connections 连接mysql的数量</li>
<li>Created_tmp_disk_tables 在磁盘上创建的临时表</li>
<li>Created_tmp_tables 在内存里创建的临时表</li>
<li>Created_tmp_files 临时文件数</li>
<li>Key_read_requests The number of requests to read a key block from the cache</li>
<li>Key_reads The number of physical reads of a key block from disk</li>
<li>Max_used_connections 同时使用的连接数</li>
<li>Open_tables 开放的表</li>
<li>Open_files 开放的文件</li>
<li>Opened_tables 打开的表</li>
<li>Questions 提交到server的查询数</li>
<li>Sort_merge_passes 如果这个值很大,应该增加my.cnf中的sort_buffer值</li>
<li>Uptime 服务器已经工作的秒数</li>
</ul>


<h3>提升性能的建议:</h3>

<ol>
<li>如果opened_tables太大,应该把my.cnf中的table_cache变大</li>
<li>如果Key_reads太大,则应该把my.cnf中key_buffer_size变大.可以用Key_reads/Key_read_requests计算出cache失败率</li>
<li>如果Handler_read_rnd太大,则你写的SQL语句里很多查询都是要扫描整个表,而没有发挥索引的键的作用</li>
<li>如果Threads_created太大,就要增加my.cnf中thread_cache_size的值.可以用Threads_created/Connections计算cache命中率</li>
<li>如果Created_tmp_disk_tables太大,就要增加my.cnf中tmp_table_size的值,用基于内存的临时表代替基于磁盘的</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to enhance mysql performance]]></title>
    <link href="http://dexterdeng.github.com/blog/2012/11/08/how-to-enhance-mysql-performance/"/>
    <updated>2012-11-08T11:36:00+08:00</updated>
    <id>http://dexterdeng.github.com/blog/2012/11/08/how-to-enhance-mysql-performance</id>
    <content type="html"><![CDATA[<h3>1. use <code>show processlist</code></h3>

<pre><code>show processlist
</code></pre>

<p>it can  check the connections,  and find the slow sql.  You can add index to some columns if needed</p>

<h3>2. check <code>/var/lib/mysql/slow.log</code></h3>

<pre><code>cat /var/lib/mysql/slow.log
</code></pre>

<p>it can  check the connections,  and find the slow sql.  You can add index to some columns if needed</p>

<p>e.g.</p>

<pre><code>SELECT DISTINCT(events.id), events.* FROM `events`   left join  event_users on event_users.event_id = events.id  WHERE ((events.user_id = 444 or (event_users.user_id = 444 and event_users.status != 0)) and (events.end_at &lt; '2012-11-07'  or (events.end_at  is null and events.start_at  &lt; '2012-11-07' )))  LIMIT 0, 20;
</code></pre>

<p>it took 5 s for the first running.</p>

<pre><code>show index from events
</code></pre>

<p>I got this:</p>

<pre><code>    +--------+------------+---------------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+
| Table  | Non_unique | Key_name                  | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment |
+--------+------------+---------------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+
| events |          0 | PRIMARY                   |            1 | id          | A         |        2180 |     NULL | NULL   |      | BTREE      |         | 
| events |          1 | index_events_on_permalink |            1 | permalink   | A         |        2180 |     NULL | NULL   | YES  | BTREE      |         | 
+--------+------------+---------------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+
2 rows in set (0.00 sec)


mysql&gt; show index from event_users;
+-------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+
| Table       | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment |
+-------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+
| event_users |          0 | PRIMARY  |            1 | id          | A         |        7671 |     NULL | NULL   |      | BTREE      |         | 
+-------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+
</code></pre>

<p>I decide to add index to event_users's event_id, user_id, events.user_id</p>

<pre><code>ALTER TABLE `events` ADD INDEX ( `user_id` )
ALTER TABLE `event_users` ADD INDEX ( `user_id` )
ALTER TABLE `event_users` ADD INDEX ( `event_id` )
</code></pre>

<h3>2. use <code>mysqltuner.pl</code>###</h3>

<p><code>mysqltuner.pl</code> is a perl script. it can connect the mysql and check
issues, and recommend you how to enhance it.</p>

<pre><code>$ perl mysqltuner.pl 

 &gt;&gt;  MySQLTuner 1.2.0 - Major Hayden &lt;major@mhtx.net&gt;
 &gt;&gt;  Bug reports, feature requests, and downloads at http://mysqltuner.com/
 &gt;&gt;  Run with '--help' for additional options and output filtering
Please enter your MySQL administrative login: root
Please enter your MySQL administrative password: 

-------- General Statistics --------------------------------------------------
[--] Skipped version check for MySQLTuner script
[OK] Currently running supported MySQL version 5.0.92-log
[OK] Operating on 64-bit architecture

-------- Storage Engine Statistics -------------------------------------------
[--] Status: -Archive -BDB -Federated +InnoDB -ISAM -NDBCluster 
[--] Data in MyISAM tables: 105M (Tables: 55)
[--] Data in InnoDB tables: 18G (Tables: 938)
[!!] Total fragmented tables: 6

-------- Security Recommendations  -------------------------------------------
[OK] All database users have passwords assigned

-------- Performance Metrics -------------------------------------------------
[--] Up for: 4d 20h 36m 22s (38M q [91.609 qps], 65K conn, TX: 78B, RX: 5B)
[--] Reads / Writes: 88% / 12%
[--] Total buffers: 3.3G global + 42.2M per thread (100 max threads)
[OK] Maximum possible memory usage: 7.5G (31% of installed RAM)
[OK] Slow queries: 0% (77/38M)
[OK] Highest usage of available connections: 43% (43/100)
[OK] Key buffer size / total MyISAM indexes: 140.0M/143.8M
[OK] Key buffer hit rate: 99.9% (218M cached / 122K reads)
[OK] Query cache efficiency: 36.7% (12M cached / 32M selects)
[!!] Query cache prunes per day: 2340785
[OK] Sorts requiring temporary tables: 0% (5K temp sorts / 2M sorts)
[!!] Joins performed without indexes: 109640
[!!] Temporary tables created on disk: 29% (700K on disk / 2M total)
[OK] Thread cache hit rate: 99% (43 created / 65K connections)
[!!] Table cache hit rate: 0% (100 open / 27K opened)
[OK] Open file limit used: 0% (15/20K)
[OK] Table locks acquired immediately: 99% (30M immediate / 30M locks)
[!!] InnoDB data size / buffer pool: 18.5G/3.0G

-------- Recommendations -----------------------------------------------------
General recommendations:
    Run OPTIMIZE TABLE to defragment tables for better performance
    Adjust your join queries to always utilize indexes
    When making adjustments, make tmp_table_size/max_heap_table_size equal
    Reduce your SELECT DISTINCT queries without LIMIT clauses
    Increase table_cache gradually to avoid file descriptor limits
Variables to adjust:
    query_cache_size (&gt; 100M)
    join_buffer_size (&gt; 32.0M, or always use indexes with joins)
    tmp_table_size (&gt; 100M)
    max_heap_table_size (&gt; 100M)
    table_cache (&gt; 100)
    innodb_buffer_pool_size (&gt;= 18G)
</code></pre>

<h4>1. <code>Run OPTIMIZE TABLE to defragment tables for better performance</code></h4>

<p>Run this command:</p>

<pre><code>mysqlcheck -u root --auto-repair --optimize --all-databases
</code></pre>

<p>You can usually fix the table by issuing:</p>

<pre><code>mysqlcheck -A -r -p
</code></pre>

<p>Restart MYSQL Server:</p>

<pre><code>/etc/init.d/mysql restart
</code></pre>

<p>use https://tools.percona.com/wizard/ to generate a conf file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL 'Incorrect key file for table' error]]></title>
    <link href="http://dexterdeng.github.com/blog/2012/10/30/mysql-incorrect-key-file-for-table-error/"/>
    <updated>2012-10-30T02:47:00+08:00</updated>
    <id>http://dexterdeng.github.com/blog/2012/10/30/mysql-incorrect-key-file-for-table-error</id>
    <content type="html"><![CDATA[<p>When saving a record to a MySQL table the other day I got the error message "Incorrect key file for table 'mytable'; try to repair it". I am uncertain why the error occured and how to ensure it doesn't happen again in the future but a quick fix for the time being is simple.</p>

<h2>How to repair a MySQL table</h2>

<p>All you need to do is to repair the table by running the following SQL command, where "mytable" is the name of the table that gave the error:</p>

<pre><code>REPAIR TABLE `mytable`;
</code></pre>

<p>You can run this from e.g. the MySQL CLI or phpMyAdmin. From phpMyAdmin select the table, then "Operations" from the navigation tabs in the right frame above the table info; then "Repair Table" from the "Table maintenance" options at the bottom of the page.</p>

<h2>When the table is /tmp/#sql_xxx_x.MYI</h2>

<p>If the error looks like "Incorrect key file for table '/tmp/#sql_xxx_x.MYI'; try to repair it" where it refers to a temporary location on the filesystem, it's likely you've run out of diskspace. Read my follow up post for more information.</p>
]]></content>
  </entry>
  
</feed>
